<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0039)http://en.wikipedia.org/wiki/Algorithms -->
<HTML lang=en dir=ltr xml:lang="en" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Algorithm - Wikipedia, the free encyclopedia</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<META content="MSHTML 6.00.6000.16705" name=GENERATOR>
<META 
content="Algorithm,A. A. Markov,A. M. Turing,Abacus,Abstract machine,Ada Lovelace,Al-Khwarizmi,Alan Turing,Alfred North Whitehead,Algebra,Algorism" 
name=keywords><LINK title="Edit this page" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit" 
type=application/x-wiki rel=alternate><LINK href="/favicon.ico" 
rel="shortcut icon"><LINK href="http://en.wikipedia.org/apple-touch-icon.png" 
rel=apple-touch-icon><LINK title="Wikipedia (en)" href="/w/opensearch_desc.php" 
type=application/opensearchdescription+xml rel=search><LINK 
href="http://www.gnu.org/copyleft/fdl.html" rel=copyright><LINK 
title="Wikipedia RSS Feed" 
href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=rss" 
type=application/rss+xml rel=alternate><LINK title="Wikipedia Atom Feed" 
href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" 
type=application/atom+xml rel=alternate><LINK media=screen 
href="Algorithm_files/shared.css" type=text/css rel=stylesheet><LINK media=print 
href="Algorithm_files/commonPrint.css" type=text/css rel=stylesheet><LINK 
media=screen href="Algorithm_files/main.css" type=text/css rel=stylesheet><LINK 
media=handheld href="Algorithm_files/main(1).css" type=text/css rel=stylesheet><!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?179" type="text/css" media="screen" /><![endif]--><!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?179" type="text/css" media="screen" /><![endif]--><!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?179" type="text/css" media="screen" /><![endif]--><!--[if IE 7]><LINK 
media=screen href="Algorithm_files/IE70Fixes.css" type=text/css rel=stylesheet><![endif]--><LINK href="Algorithm_files/index.css" type=text/css 
rel=stylesheet><LINK media=print href="Algorithm_files/index(1).css" 
type=text/css rel=stylesheet><LINK media=handheld 
href="Algorithm_files/index(2).css" type=text/css rel=stylesheet><LINK 
href="Algorithm_files/index(3).css" type=text/css rel=stylesheet><LINK 
href="Algorithm_files/index(4).css" type=text/css rel=stylesheet><!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?179"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
<SCRIPT type=text/javascript>/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Algorithm";
		var wgTitle = "Algorithm";
		var wgAction = "view";
		var wgArticleId = "775";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = "247158036";
		var wgVersion = "1.14alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</SCRIPT>

<SCRIPT src="Algorithm_files/wikibits.js" type=text/javascript><!-- wikibits js --></SCRIPT>
<!-- Head Scripts -->
<SCRIPT src="Algorithm_files/ajax.js" type=text/javascript></SCRIPT>

<SCRIPT src="Algorithm_files/mwsuggest.js" type=text/javascript></SCRIPT>

<SCRIPT src="Algorithm_files/index.php" 
type=text/javascript><!-- site js --></SCRIPT>
</HEAD>
<BODY class="mediawiki ltr ns-0 ns-subject page-Algorithm skin-monobook">
<DIV id=globalWrapper>
<DIV id=column-content>
<DIV id=content><A id=top name=top></A>
<DIV id=siteNotice>
<SCRIPT language=JavaScript type=text/javascript>
<!--
document.writeln("\x3cp\x3e\x3c/p\x3e\n");
-->
</SCRIPT>
</DIV>
<H1 class=firstHeading>Algorithm</H1>
<DIV id=bodyContent>
<H3 id=siteSub>From Wikipedia, the free encyclopedia</H3>
<DIV id=contentSub>&nbsp;&nbsp;(Redirected from <A title=Algorithms 
href="http://en.wikipedia.org/w/index.php?title=Algorithms&amp;redirect=no">Algorithms</A>)</DIV>
<DIV id=jump-to-nav>Jump to: <A 
href="http://en.wikipedia.org/wiki/Algorithms#column-one">navigation</A>, <A 
href="http://en.wikipedia.org/wiki/Algorithms#searchInput">search</A></DIV><!-- start content -->
<DIV class="thumb tright">
<DIV class=thumbinner style="WIDTH: 182px"><A class=image 
title="Flowcharts are often used to graphically represent algorithms." 
href="http://en.wikipedia.org/wiki/Image:LampFlowchart.svg"><IMG 
class=thumbimage height=246 
alt="Flowcharts are often used to graphically represent algorithms." 
src="Algorithm_files/180px-LampFlowchart.svg.png" width=180 border=0></A> 
<DIV class=thumbcaption>
<DIV class=magnify><A class=internal title=Enlarge 
href="http://en.wikipedia.org/wiki/Image:LampFlowchart.svg"><IMG height=11 
alt="" src="Algorithm_files/magnify-clip.png" width=15></A></DIV><A 
title=Flowchart href="http://en.wikipedia.org/wiki/Flowchart">Flowcharts</A> are 
often used to graphically represent algorithms.</DIV></DIV></DIV>
<P>In <A title=Mathematics 
href="http://en.wikipedia.org/wiki/Mathematics">mathematics</A>, <A 
title=Computing href="http://en.wikipedia.org/wiki/Computing">computing</A>, <A 
title=Linguistics 
href="http://en.wikipedia.org/wiki/Linguistics">linguistics</A> and related 
subjects, an <B>algorithm</B> is a sequence of finite instructions, often used 
for <A title=Calculation 
href="http://en.wikipedia.org/wiki/Calculation">calculation</A> and <A 
title="Data processing" href="http://en.wikipedia.org/wiki/Data_processing">data 
processing</A>. It is formally a type of <A title="Effective method" 
href="http://en.wikipedia.org/wiki/Effective_method">effective method</A> in 
which a list of well-defined instructions for completing a task will, when given 
an initial state, proceed through a well-defined series of successive states, 
eventually terminating in an end-state. The transition from one state to the 
next is not necessarily <A class=mw-redirect title=Deterministic 
href="http://en.wikipedia.org/wiki/Deterministic">deterministic</A>; some 
algorithms, known as <A class=mw-redirect title="Probabilistic algorithms" 
href="http://en.wikipedia.org/wiki/Probabilistic_algorithms">probabilistic 
algorithms</A>, incorporate randomness.</P>
<P>A partial formalization of the concept began with attempts to solve the <A 
title=Entscheidungsproblem 
href="http://en.wikipedia.org/wiki/Entscheidungsproblem">Entscheidungsproblem</A> 
(the "decision problem") posed by <A title="David Hilbert" 
href="http://en.wikipedia.org/wiki/David_Hilbert">David Hilbert</A> in 1928. 
Subsequent formalizations were framed as attempts to define "<A 
class=mw-redirect title="Effective calculability" 
href="http://en.wikipedia.org/wiki/Effective_calculability">effective 
calculability</A>" (Kleene 1943:274) or "effective method" (Rosser 1939:225); 
those formalizations included the Gödel-Herbrand-Kleene <A 
title="Recursion (computer science)" 
href="http://en.wikipedia.org/wiki/Recursion_(computer_science)">recursive 
functions</A> of 1930, 1934 and 1935, <A title="Alonzo Church" 
href="http://en.wikipedia.org/wiki/Alonzo_Church">Alonzo Church</A>'s <A 
title="Lambda calculus" 
href="http://en.wikipedia.org/wiki/Lambda_calculus">lambda calculus</A> of 1936, 
<A class=mw-redirect title="Emil Post" 
href="http://en.wikipedia.org/wiki/Emil_Post">Emil Post</A>'s "Formulation I" of 
1936, and <A title="Alan Turing" 
href="http://en.wikipedia.org/wiki/Alan_Turing">Alan Turing</A>'s <A 
class=mw-redirect title="Turing machines" 
href="http://en.wikipedia.org/wiki/Turing_machines">Turing machines</A> of 
1936–7 and 1939.</P>
<TABLE class=toc id=toc summary=Contents>
  <TBODY>
  <TR>
    <TD>
      <DIV id=toctitle>
      <H2>Contents</H2></DIV>
      <UL>
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Algorithms#Etymology"><SPAN 
        class=tocnumber>1</SPAN> <SPAN class=toctext>Etymology</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Algorithms#Why_algorithms_are_necessary:_an_informal_definition"><SPAN 
        class=tocnumber>2</SPAN> <SPAN class=toctext>Why algorithms are 
        necessary: an informal definition</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Algorithms#Formalization_of_algorithms"><SPAN 
        class=tocnumber>3</SPAN> <SPAN class=toctext>Formalization of 
        algorithms</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Termination"><SPAN 
          class=tocnumber>3.1</SPAN> <SPAN class=toctext>Termination</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Expressing_algorithms"><SPAN 
          class=tocnumber>3.2</SPAN> <SPAN class=toctext>Expressing 
          algorithms</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Implementation"><SPAN 
          class=tocnumber>3.3</SPAN> <SPAN 
          class=toctext>Implementation</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Algorithms#Example"><SPAN 
        class=tocnumber>4</SPAN> <SPAN class=toctext>Example</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Algorithmic_analysis"><SPAN 
          class=tocnumber>4.1</SPAN> <SPAN class=toctext>Algorithmic 
          analysis</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Algorithms#Classes"><SPAN 
        class=tocnumber>5</SPAN> <SPAN class=toctext>Classes</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Classification_by_implementation"><SPAN 
          class=tocnumber>5.1</SPAN> <SPAN class=toctext>Classification by 
          implementation</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Classification_by_design_paradigm"><SPAN 
          class=tocnumber>5.2</SPAN> <SPAN class=toctext>Classification by 
          design paradigm</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Classification_by_field_of_study"><SPAN 
          class=tocnumber>5.3</SPAN> <SPAN class=toctext>Classification by field 
          of study</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Classification_by_complexity"><SPAN 
          class=tocnumber>5.4</SPAN> <SPAN class=toctext>Classification by 
          complexity</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Classification_by_computing_power"><SPAN 
          class=tocnumber>5.5</SPAN> <SPAN class=toctext>Classification by 
          computing power</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Algorithms#Legal_issues"><SPAN 
        class=tocnumber>6</SPAN> <SPAN class=toctext>Legal issues</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Algorithms#History:_Development_of_the_notion_of_.22algorithm.22"><SPAN 
        class=tocnumber>7</SPAN> <SPAN class=toctext>History: Development of the 
        notion of "algorithm"</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Origin_of_the_word"><SPAN 
          class=tocnumber>7.1</SPAN> <SPAN class=toctext>Origin of the 
          word</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Discrete_and_distinguishable_symbols"><SPAN 
          class=tocnumber>7.2</SPAN> <SPAN class=toctext>Discrete and 
          distinguishable symbols</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Manipulation_of_symbols_as_.22place_holders.22_for_numbers:_algebra"><SPAN 
          class=tocnumber>7.3</SPAN> <SPAN class=toctext>Manipulation of symbols 
          as "place holders" for numbers: algebra</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Mechanical_contrivances_with_discrete_states"><SPAN 
          class=tocnumber>7.4</SPAN> <SPAN class=toctext>Mechanical contrivances 
          with discrete states</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Mathematics_during_the_1800s_up_to_the_mid-1900s"><SPAN 
          class=tocnumber>7.5</SPAN> <SPAN class=toctext>Mathematics during the 
          1800s up to the mid-1900s</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Emil_Post_.281936.29_and_Alan_Turing_.281936-7.2C_1939.29"><SPAN 
          class=tocnumber>7.6</SPAN> <SPAN class=toctext>Emil Post (1936) and 
          Alan Turing (1936-7, 1939)</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#J._B._Rosser_.281939.29_and_S._C._Kleene_.281943.29"><SPAN 
          class=tocnumber>7.7</SPAN> <SPAN class=toctext>J. B. Rosser (1939) and 
          S. C. Kleene (1943)</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#History_after_1950"><SPAN 
          class=tocnumber>7.8</SPAN> <SPAN class=toctext>History after 
          1950</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Algorithms#References"><SPAN 
        class=tocnumber>8</SPAN> <SPAN class=toctext>References</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Algorithms#Secondary_references"><SPAN 
          class=tocnumber>8.1</SPAN> <SPAN class=toctext>Secondary 
          references</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Algorithms#External_links"><SPAN 
        class=tocnumber>9</SPAN> <SPAN class=toctext>External links</SPAN></A> 
        </LI></UL></TD></TR></TBODY></TABLE>
<SCRIPT type=text/javascript>
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</SCRIPT>

<P><A id=Etymology name=Etymology></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: Etymology" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=1">edit</A>]</SPAN> 
<SPAN class=mw-headline>Etymology</SPAN></H2>
<P><A title="Muhammad ibn Mūsā al-Khwārizmī" 
href="http://en.wikipedia.org/wiki/Muhammad_ibn_M%C5%ABs%C4%81_al-Khw%C4%81rizm%C4%AB">Al-Khwārizmī</A>, 
<A title="Persian people" 
href="http://en.wikipedia.org/wiki/Persian_people">Persian</A> <A 
title=Astronomer href="http://en.wikipedia.org/wiki/Astronomer">astronomer</A> 
and <A title=Mathematician 
href="http://en.wikipedia.org/wiki/Mathematician">mathematician</A>, wrote a <A 
title=Treatise href="http://en.wikipedia.org/wiki/Treatise">treatise</A> in 825 
AD, <I>On Calculation with Hindu Numerals</I>. (See <A title=Algorism 
href="http://en.wikipedia.org/wiki/Algorism">algorism</A>). It was translated 
into <A title=Latin href="http://en.wikipedia.org/wiki/Latin">Latin</A> in the 
12th century as <I>Algoritmi de numero Indorum</I> (al-Daffa 1977), which title 
was likely intended to mean "Algoritmi on the numbers of the Indians", where 
"Algoritmi" was the translator's rendition of the author's name; but people 
misunderstanding the title treated <I>Algoritmi</I> as a Latin plural and this 
led to the word "algorithm" (Latin <I>algorismus</I>) coming to mean 
"calculation method". The intrusive "th" is most likely due to a <A 
title="False cognate" href="http://en.wikipedia.org/wiki/False_cognate">false 
cognate</A> with the Greek <SPAN lang=grc xml:lang="grc">ἀριθμός</SPAN> 
(<I>arithmos</I>) meaning "number".</P>
<P><A id=Why_algorithms_are_necessary:_an_informal_definition 
name=Why_algorithms_are_necessary:_an_informal_definition></A></P>
<H2><SPAN class=editsection>[<A 
title="Edit section: Why algorithms are necessary: an informal definition" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=2">edit</A>]</SPAN> 
<SPAN class=mw-headline>Why algorithms are necessary: an informal 
definition</SPAN></H2>
<P>No generally accepted <I>formal</I> definition of "algorithm" exists yet.</P>
<P>An informal definition could be "an algorithm is a computer program that 
calculates something." For some people, a program is only an algorithm if it 
stops eventually. For others, a program is only an algorithm if it stops before 
a given number of calculation steps.</P>
<P>A prototypical example of an "algorithm" is Euclid's algorithm to determine 
the maximum common divisor of two integers greater than one: "subtract the 
smaller number from the larger one; repeat until you get a zero or a one." This 
procedure is known to stop always and the number of subtractions needed is 
always smaller than the larger of the two numbers.</P>
<P>We can derive clues to the issues involved and an informal meaning of the 
word from the following quotation from <A title="" 
href="http://en.wikipedia.org/wiki/Algorithms#CITEREFBoolosJeffrey1974.2C_1999">Boolos 
&amp; Jeffrey (1974, 1999)</A> (boldface added):</P>
<BLOCKQUOTE>
  <P>No human being can write fast enough or long enough or small enough to list 
  all members of an enumerably infinite set by writing out their names, one 
  after another, in some notation. But humans can do something equally useful, 
  in the case of certain enumerably infinite sets: They can give <B>explicit 
  instructions for determining the nth member of the set</B>, for arbitrary 
  finite n. Such instructions are to be given quite explicitly, in a form in 
  which <B>they could be followed by a computing machine</B>, or by a <B>human 
  who is capable of carrying out only very elementary operations on symbols</B> 
  <CITE class=inline>(<A title="" 
  href="http://en.wikipedia.org/wiki/Algorithms#CITEREFBoolosJeffrey1974.2C_1999">Boolos 
  &amp; Jeffrey 1974, 1999</A>, p.&nbsp;19)</CITE></P></BLOCKQUOTE>
<P>The words "enumerably infinite" mean "countable using integers perhaps 
extending to infinity." Thus Boolos and Jeffrey are saying that an algorithm 
<I>implies</I> instructions for a process that "creates" output integers from an 
<I>arbitrary</I> "input" integer or integers that, in theory, can be chosen from 
0 to infinity. Thus we might expect an algorithm to be an algebraic equation 
such as <B>y = m + n</B> — two arbitrary "input variables" <B>m</B> and <B>n</B> 
that produce an output <B>y</B>. As we see in <A 
title="Algorithm characterizations" 
href="http://en.wikipedia.org/wiki/Algorithm_characterizations">Algorithm 
characterizations</A> — the word algorithm implies much more than this, 
something on the order of (for our addition example):</P>
<DL>
  <DD>Precise instructions (in language understood by "the computer") for a 
  "fast, efficient, good" <I>process</I> that specifies the "moves" of "the 
  computer" (machine or human, equipped with the necessary internally-contained 
  information and capabilities) to find, decode, and then munch arbitrary input 
  integers/symbols <B>m</B> and <B>n</B>, symbols <B>+</B> and <B>=</B> ... and 
  (reliably, correctly, "effectively") produce, in a "reasonable" <A title=Time 
  href="http://en.wikipedia.org/wiki/Time">time</A>, output-integer <B>y</B> at 
  a specified place and in a specified format. </DD></DL>
<P>The concept of <I>algorithm</I> is also used to define the notion of <A 
title="Decidability (logic)" 
href="http://en.wikipedia.org/wiki/Decidability_(logic)">decidability</A>. That 
notion is central for explaining how <A title="Formal system" 
href="http://en.wikipedia.org/wiki/Formal_system">formal systems</A> come into 
being starting from a small set of <A title=Axiom 
href="http://en.wikipedia.org/wiki/Axiom">axioms</A> and rules. In <A 
title=Logic href="http://en.wikipedia.org/wiki/Logic">logic</A>, the time that 
an algorithm requires to complete cannot be measured, as it is not apparently 
related with our customary physical dimension. From such uncertainties, that 
characterize ongoing work, stems the unavailability of a definition of 
<I>algorithm</I> that suits both concrete (in some sense) and abstract usage of 
the term.</P>
<DL>
  <DD><I>For a detailed presentation of the various points of view around the 
  definition of "algorithm" see <A title="Algorithm characterizations" 
  href="http://en.wikipedia.org/wiki/Algorithm_characterizations">Algorithm 
  characterizations</A>. For examples of simple addition algorithms specified in 
  the detailed manner described in <A title="Algorithm characterizations" 
  href="http://en.wikipedia.org/wiki/Algorithm_characterizations">Algorithm 
  characterizations</A>, see <A title="Algorithm examples" 
  href="http://en.wikipedia.org/wiki/Algorithm_examples">Algorithm 
  examples</A>.</I> </DD></DL>
<P><A id=Formalization_of_algorithms name=Formalization_of_algorithms></A></P>
<H2><SPAN class=editsection>[<A 
title="Edit section: Formalization of algorithms" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=3">edit</A>]</SPAN> 
<SPAN class=mw-headline>Formalization of algorithms</SPAN></H2>
<P>Algorithms are essential to the way <A title=Computer 
href="http://en.wikipedia.org/wiki/Computer">computers</A> process information. 
Many <A title="Computer program" 
href="http://en.wikipedia.org/wiki/Computer_program">computer programs</A> 
contain algorithms that specify the specific instructions a computer should 
perform (in a specific order) to carry out a specified task, such as calculating 
employees’ paychecks or printing students’ report cards. Thus, an algorithm can 
be considered to be any sequence of operations that can be simulated by a <A 
title="Turing completeness" 
href="http://en.wikipedia.org/wiki/Turing_completeness">Turing-complete</A> 
system. Authors who assert this thesis include Savage (1987) and Gurevich 
(2000):</P>
<BLOCKQUOTE>
  <P>...Turing's informal argument in favor of his thesis justifies a stronger 
  thesis: every algorithm can be simulated by a Turing machine (Gurevich 
  2000:1)...according to Savage [1987], an algorithm is a computational process 
  defined by a Turing machine. (Gurevich 2000:3)</P></BLOCKQUOTE>
<P>Typically, when an algorithm is associated with processing information, data 
is read from an input source, written to an output device, and/or stored for 
further processing. Stored data is regarded as part of the internal state of the 
entity performing the algorithm. In practice, the state is stored in one or more 
<A title="Data structure" 
href="http://en.wikipedia.org/wiki/Data_structure">data structures</A>.</P>
<P>For any such computational process, the algorithm must be rigorously defined: 
specified in the way it applies in all possible circumstances that could arise. 
That is, any conditional steps must be systematically dealt with, case-by-case; 
the criteria for each case must be clear (and computable).</P>
<P>Because an algorithm is a precise list of precise steps, the order of 
computation will always be critical to the functioning of the algorithm. 
Instructions are usually assumed to be listed explicitly, and are described as 
starting "from the top" and going "down to the bottom", an idea that is 
described more formally by <I><A title="Control flow" 
href="http://en.wikipedia.org/wiki/Control_flow">flow of control</A></I>.</P>
<P>So far, this discussion of the formalization of an algorithm has assumed the 
premises of <A title="Imperative programming" 
href="http://en.wikipedia.org/wiki/Imperative_programming">imperative 
programming</A>. This is the most common conception, and it attempts to describe 
a task in discrete, "mechanical" means. Unique to this conception of formalized 
algorithms is the <A class=mw-redirect title="Assignment operation" 
href="http://en.wikipedia.org/wiki/Assignment_operation">assignment 
operation</A>, setting the value of a variable. It derives from the intuition of 
"<A title=Memory href="http://en.wikipedia.org/wiki/Memory">memory</A>" as a 
scratchpad. There is an example below of such an assignment.</P>
<P>For some alternate conceptions of what constitutes an algorithm see <A 
title="Functional programming" 
href="http://en.wikipedia.org/wiki/Functional_programming">functional 
programming</A> and <A title="Logic programming" 
href="http://en.wikipedia.org/wiki/Logic_programming">logic programming</A> 
.</P>
<P><A id=Termination name=Termination></A></P>
<H3><SPAN class=editsection>[<A title="Edit section: Termination" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=4">edit</A>]</SPAN> 
<SPAN class=mw-headline>Termination</SPAN></H3>
<P>Some writers restrict the definition of <I>algorithm</I> to procedures that 
eventually finish. In such a category Kleene places the "<I>decision 
procedure</I> or <I>decision method</I> or <I>algorithm</I> for the question" 
(Kleene 1952:136). Others, including Kleene, include procedures that could run 
forever without stopping; such a procedure has been called a "computational 
method" (Knuth 1997:5) or "<I>calculation procedure</I> or <I>algorithm</I>" 
(Kleene 1952:137); however, Kleene notes that such a method must eventually 
exhibit "some object" (Kleene 1952:137).</P>
<P>Minsky makes the pertinent observation, in regards to determining whether an 
algorithm will eventually terminate (from a particular starting state):</P>
<BLOCKQUOTE>
  <P>But if the length of the process is not known in advance, then "trying" it 
  may not be decisive, because if the process does go on forever — then at no 
  time will we ever be sure of the answer (Minsky 1967:105).</P></BLOCKQUOTE>
<P>As it happens, no other method can do any better, as was shown by <A 
title="Alan Turing" href="http://en.wikipedia.org/wiki/Alan_Turing">Alan 
Turing</A> with his celebrated result on the undecidability of the so-called <A 
title="Halting problem" 
href="http://en.wikipedia.org/wiki/Halting_problem">halting problem</A>. There 
is no algorithmic procedure for determining of arbitrary algorithms whether or 
not they terminate from given starting states. The analysis of algorithms for 
their likelihood of termination is called <A title="Termination analysis" 
href="http://en.wikipedia.org/wiki/Termination_analysis">termination 
analysis</A>.</P>
<P>See the examples of (im-)"proper" subtraction at <A title="Partial function" 
href="http://en.wikipedia.org/wiki/Partial_function">partial function</A> for 
more about what can happen when an algorithm fails for certain of its input 
numbers — e.g., (i) non-termination, (ii) production of "junk" (output in the 
wrong format to be considered a number) or no number(s) at all (halt ends the 
computation with no output), (iii) wrong number(s), or (iv) a combination of 
these. Kleene proposed that the production of "junk" or failure to produce a 
number is solved by having the algorithm detect these instances and produce 
e.g., an error message (he suggested "0"), or preferably, force the algorithm 
into an endless loop (Kleene 1952:322). Davis does this to his subtraction 
algorithm — he fixes his algorithm in a second example so that it is proper 
subtraction (Davis 1958:12-15). Along with the logical outcomes "true" and 
"false" Kleene also proposes the use of a third logical symbol "u" — undecided 
(Kleene 1952:326) — thus an algorithm will always produce <I>something</I> when 
confronted with a "proposition". The problem of wrong answers must be solved 
with an independent "proof" of the algorithm e.g., using induction:</P>
<BLOCKQUOTE>
  <P>We normally require auxiliary evidence for this (that the algorithm 
  correctly defines a <A class=mw-redirect title="Mu recursive function" 
  href="http://en.wikipedia.org/wiki/Mu_recursive_function">mu recursive 
  function</A>), e.g., in the form of an inductive proof that, for each argument 
  value, the computation terminates with a unique value (Minsky 
1967:186).</P></BLOCKQUOTE>
<P><A id=Expressing_algorithms name=Expressing_algorithms></A></P>
<H3><SPAN class=editsection>[<A title="Edit section: Expressing algorithms" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=5">edit</A>]</SPAN> 
<SPAN class=mw-headline>Expressing algorithms</SPAN></H3>
<P>Algorithms can be expressed in many kinds of notation, including <A 
title="Natural language" 
href="http://en.wikipedia.org/wiki/Natural_language">natural languages</A>, <A 
title=Pseudocode href="http://en.wikipedia.org/wiki/Pseudocode">pseudocode</A>, 
<A title=Flowchart href="http://en.wikipedia.org/wiki/Flowchart">flowcharts</A>, 
and <A title="Programming language" 
href="http://en.wikipedia.org/wiki/Programming_language">programming 
languages</A>. Natural language expressions of algorithms tend to be verbose and 
ambiguous, and are rarely used for complex or technical algorithms. Pseudocode 
and flowcharts are structured ways to express algorithms that avoid many of the 
ambiguities common in natural language statements, while remaining independent 
of a particular implementation language. Programming languages are primarily 
intended for expressing algorithms in a form that can be executed by a <A 
title=Computer href="http://en.wikipedia.org/wiki/Computer">computer</A>, but 
are often used as a way to define or document algorithms.</P>
<P>There is a wide variety of representations possible and one can express a 
given <A title="Turing machine" 
href="http://en.wikipedia.org/wiki/Turing_machine">Turing machine</A> program as 
a sequence of machine tables (see more at <A title="Finite state machine" 
href="http://en.wikipedia.org/wiki/Finite_state_machine">finite state 
machine</A> and <A title="State transition table" 
href="http://en.wikipedia.org/wiki/State_transition_table">state transition 
table</A>), as flowcharts (see more at <A title="State diagram" 
href="http://en.wikipedia.org/wiki/State_diagram">state diagram</A>), or as a 
form of rudimentary <A title="Machine code" 
href="http://en.wikipedia.org/wiki/Machine_code">machine code</A> or <A 
class=mw-redirect title="Assembly code" 
href="http://en.wikipedia.org/wiki/Assembly_code">assembly code</A> called "sets 
of quadruples" (see more at <A title="Turing machine" 
href="http://en.wikipedia.org/wiki/Turing_machine">Turing machine</A>).</P>
<P>Sometimes it is helpful in the description of an algorithm to supplement 
small "flow charts" (state diagrams) with natural-language and/or arithmetic 
expressions written inside "<A title="Block diagram" 
href="http://en.wikipedia.org/wiki/Block_diagram">block diagrams</A>" to 
summarize what the "flow charts" are accomplishing.</P>
<P>Representations of algorithms are generally classed into three accepted 
levels of Turing machine description (Sipser 2006:157):</P>
<UL>
  <LI><B>1 High-level description</B>: </LI></UL>
<DL>
  <DD>
  <DL>
    <DD>"...prose to describe an algorithm, ignoring the implementation details. 
    At this level we do not need to mention how the machine manages its tape or 
    head" </DD></DL></DD></DL>
<UL>
  <LI><B>2 Implementation description</B>: </LI></UL>
<DL>
  <DD>
  <DL>
    <DD>"...prose used to define the way the Turing machine uses its head and 
    the way that it stores data on its tape. At this level we do not give 
    details of states or transition function" </DD></DL></DD></DL>
<UL>
  <LI><B>3 Formal description</B>: </LI></UL>
<DL>
  <DD>
  <DL>
    <DD>Most detailed, "lowest level", gives the Turing machine's "state table". 
    </DD></DL></DD></DL>
<DL>
  <DD><I>For an example of the simple algorithm "Add m+n" described in all three 
  levels see <A title="Algorithm examples" 
  href="http://en.wikipedia.org/wiki/Algorithm_examples">Algorithm 
  examples</A>.</I> </DD></DL>
<P><A id=Implementation name=Implementation></A></P>
<H3><SPAN class=editsection>[<A title="Edit section: Implementation" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=6">edit</A>]</SPAN> 
<SPAN class=mw-headline>Implementation</SPAN></H3>
<P>Most algorithms are intended to be implemented as <A class=mw-redirect 
title="Computer programs" 
href="http://en.wikipedia.org/wiki/Computer_programs">computer programs</A>. 
However, algorithms are also implemented by other means, such as in a biological 
<A title="Neural network" 
href="http://en.wikipedia.org/wiki/Neural_network">neural network</A> (for 
example, the <A title="Human brain" 
href="http://en.wikipedia.org/wiki/Human_brain">human brain</A> implementing <A 
title=Arithmetic href="http://en.wikipedia.org/wiki/Arithmetic">arithmetic</A> 
or an insect looking for food), in an <A class=mw-redirect 
title="Electrical circuit" 
href="http://en.wikipedia.org/wiki/Electrical_circuit">electrical circuit</A>, 
or in a mechanical device.</P>
<P><A id=Example name=Example></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: Example" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=7">edit</A>]</SPAN> 
<SPAN class=mw-headline>Example</SPAN></H2>
<P>One of the simplest algorithms is to find the largest number in an (unsorted) 
list of numbers. The solution necessarily requires looking at every number in 
the list, but only once at each. From this follows a simple algorithm, which can 
be stated in a high-level description English prose, as:</P>
<P><B>High-level description:</B></P>
<OL>
  <LI>Assume the first item is largest. 
  <LI>Look at each of the remaining items in the list and if it is larger than 
  the largest item so far, make a note of it. 
  <LI>The last noted item is the largest in the list when the process is 
  complete. </LI></OL>
<P><B>(Quasi-)formal description:</B> Written in prose but much closer to the 
high-level language of a computer program, the following is the more formal 
coding of the algorithm in <A title=Pseudocode 
href="http://en.wikipedia.org/wiki/Pseudocode">pseudocode</A> or <A 
title="Pidgin code" href="http://en.wikipedia.org/wiki/Pidgin_code">pidgin 
code</A>:</P>
<DIV 
style="BORDER-RIGHT: #cccccc 1px solid; PADDING-RIGHT: 4px; BORDER-TOP: #cccccc 1px solid; PADDING-LEFT: 4px; PADDING-BOTTOM: 4px; BORDER-LEFT: #cccccc 1px solid; PADDING-TOP: 4px; BORDER-BOTTOM: #cccccc 1px solid; BACKGROUND-COLOR: #f8f8f8"><PRE><B>Algorithm</B> LargestNumber
  Input: A non-empty list of numbers <I>L</I>.
  Output: The <I>largest</I> number in the list <I>L</I>.

  <I>largest</I> ← <I>L</I><SUB>0</SUB>
  <B>for each</B> <I>item</I> <B>in</B> the list <I>L<SUB>≥1</SUB></I>, <B>do</B>
    <B>if</B> the <I>item</I> &gt; <I>largest</I>, <B>then</B>
      <I>largest</I> ← the <I>item</I>
  <B>return</B> <I>largest</I>
</PRE>
<UL>
  <LI><SMALL>"←" is a loose shorthand for "changes to". For instance, 
  "<I>largest</I> ← <I>item</I>" means that the value of <I>largest</I> changes 
  to the value of <I>item</I>.</SMALL> 
  <LI><SMALL>"<B>return</B>" terminates the algorithm and outputs the value that 
  follows.</SMALL> </LI></UL></DIV>
<P>For a more complex example of an algorithm, see <A class=mw-redirect 
title="Euclid's algorithm" 
href="http://en.wikipedia.org/wiki/Euclid%27s_algorithm">Euclid's algorithm</A> 
for the <A title="Greatest common divisor" 
href="http://en.wikipedia.org/wiki/Greatest_common_divisor">greatest common 
divisor</A>, one of the earliest algorithms known.</P>
<P><A id=Algorithmic_analysis name=Algorithmic_analysis></A></P>
<H3><SPAN class=editsection>[<A title="Edit section: Algorithmic analysis" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=8">edit</A>]</SPAN> 
<SPAN class=mw-headline>Algorithmic analysis</SPAN></H3>
<P>As it happens, it is important to know how much of a particular resource 
(such as time or storage) is required for a given algorithm. Methods have been 
developed for the <A title="Analysis of algorithms" 
href="http://en.wikipedia.org/wiki/Analysis_of_algorithms">analysis of 
algorithms</A> to obtain such quantitative answers; for example, the algorithm 
above has a time requirement of O(<I>n</I>), using the <A title="Big O notation" 
href="http://en.wikipedia.org/wiki/Big_O_notation">big O notation</A> with 
<I>n</I> as the length of the list. At all times the algorithm only needs to 
remember two values: the largest number found so far, and its current position 
in the input list. Therefore it is said to have a space requirement of 
<I>O(1)</I>, if the space required to store the input numbers is not counted, or 
O (log <I>n</I>) if it is counted.</P>
<P>Different algorithms may complete the same task with a different set of 
instructions in less or more time, space, or effort than others. For example, 
given two different recipes for making potato salad, one may have <I>peel the 
potato</I> before <I>boil the potato</I> while the other presents the steps in 
the reverse order, yet they both call for these steps to be repeated for all 
potatoes and end when the potato salad is ready to be eaten.</P>
<P>The <A title="Analysis of algorithms" 
href="http://en.wikipedia.org/wiki/Analysis_of_algorithms">analysis and study of 
algorithms</A> is a discipline of <A title="Computer science" 
href="http://en.wikipedia.org/wiki/Computer_science">computer science</A>, and 
is often practiced abstractly without the use of a specific <A 
title="Programming language" 
href="http://en.wikipedia.org/wiki/Programming_language">programming 
language</A> or implementation. In this sense, algorithm analysis resembles 
other mathematical disciplines in that it focuses on the underlying properties 
of the algorithm and not on the specifics of any particular implementation. 
Usually <A title=Pseudocode 
href="http://en.wikipedia.org/wiki/Pseudocode">pseudocode</A> is used for 
analysis as it is the simplest and most general representation.</P>
<P><A id=Classes name=Classes></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: Classes" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=9">edit</A>]</SPAN> 
<SPAN class=mw-headline>Classes</SPAN></H2>
<P>There are various ways to classify algorithms, each with its own merits.</P>
<P><A id=Classification_by_implementation 
name=Classification_by_implementation></A></P>
<H3><SPAN class=editsection>[<A 
title="Edit section: Classification by implementation" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=10">edit</A>]</SPAN> 
<SPAN class=mw-headline>Classification by implementation</SPAN></H3>
<P>One way to classify algorithms is by implementation means.</P>
<UL>
  <LI><B>Recursion</B> or <B>iteration</B>: A <A class=mw-redirect 
  title="Recursive algorithm" 
  href="http://en.wikipedia.org/wiki/Recursive_algorithm">recursive 
  algorithm</A> is one that invokes (makes reference to) itself repeatedly until 
  a certain condition matches, which is a method common to <A 
  title="Functional programming" 
  href="http://en.wikipedia.org/wiki/Functional_programming">functional 
  programming</A>. <A title=Iteration 
  href="http://en.wikipedia.org/wiki/Iteration">Iterative</A> algorithms use 
  repetitive constructs like <A title="Control flow" 
  href="http://en.wikipedia.org/wiki/Control_flow#Loops">loops</A> and sometimes 
  additional data structures like <A title="Stack (data structure)" 
  href="http://en.wikipedia.org/wiki/Stack_(data_structure)">stacks</A> to solve 
  the given problems. Some problems are naturally suited for one implementation 
  or the other. For example, <A class=mw-redirect title="Towers of hanoi" 
  href="http://en.wikipedia.org/wiki/Towers_of_hanoi">towers of hanoi</A> is 
  well understood in recursive implementation. Every recursive version has an 
  equivalent (but possibly more or less complex) iterative version, and vice 
  versa. </LI></UL>
<UL>
  <LI><B>Logical</B>: An algorithm may be viewed as controlled <A 
  title="Deductive reasoning" 
  href="http://en.wikipedia.org/wiki/Deductive_reasoning">logical deduction</A>. 
  This notion may be expressed as: <B>Algorithm = logic + control</B> (Kowalski 
  1979). The logic component expresses the axioms that may be used in the 
  computation and the control component determines the way in which deduction is 
  applied to the axioms. This is the basis for the <A title="Logic programming" 
  href="http://en.wikipedia.org/wiki/Logic_programming">logic programming</A> 
  paradigm. In pure logic programming languages the control component is fixed 
  and algorithms are specified by supplying only the logic component. The appeal 
  of this approach is the elegant <A 
  title="Formal semantics of programming languages" 
  href="http://en.wikipedia.org/wiki/Formal_semantics_of_programming_languages">semantics</A>: 
  a change in the axioms has a well defined change in the algorithm. </LI></UL>
<UL>
  <LI><B>Serial</B> or <B>parallel</B> or <B>distributed</B>: Algorithms are 
  usually discussed with the assumption that computers execute one instruction 
  of an algorithm at a time. Those computers are sometimes called serial 
  computers. An algorithm designed for such an environment is called a serial 
  algorithm, as opposed to <A title="Parallel algorithm" 
  href="http://en.wikipedia.org/wiki/Parallel_algorithm">parallel algorithms</A> 
  or <A title="Distributed algorithms" 
  href="http://en.wikipedia.org/wiki/Distributed_algorithms">distributed 
  algorithms</A>. Parallel algorithms take advantage of computer architectures 
  where several processors can work on a problem at the same time, whereas 
  distributed algorithms utilize multiple machines connected with a <A 
  class=mw-redirect title="Computer Network" 
  href="http://en.wikipedia.org/wiki/Computer_Network">network</A>. Parallel or 
  distributed algorithms divide the problem into more symmetrical or 
  asymmetrical subproblems and collect the results back together. The resource 
  consumption in such algorithms is not only processor cycles on each processor 
  but also the communication overhead between the processors. Sorting algorithms 
  can be parallelized efficiently, but their communication overhead is 
  expensive. Iterative algorithms are generally parallelizable. Some problems 
  have no parallel algorithms, and are called inherently serial problems. 
</LI></UL>
<UL>
  <LI><B>Deterministic</B> or <B>non-deterministic</B>: <A 
  title="Deterministic algorithm" 
  href="http://en.wikipedia.org/wiki/Deterministic_algorithm">Deterministic 
  algorithms</A> solve the problem with exact decision at every step of the 
  algorithm whereas <A class=mw-redirect title="Non-deterministic algorithm" 
  href="http://en.wikipedia.org/wiki/Non-deterministic_algorithm">non-deterministic 
  algorithm</A> solve problems via guessing although typical guesses are made 
  more accurate through the use of <A class=mw-redirect title=Heuristics 
  href="http://en.wikipedia.org/wiki/Heuristics">heuristics</A>. </LI></UL>
<UL>
  <LI><B>Exact</B> or <B>approximate</B>: While many algorithms reach an exact 
  solution, <A title="Approximation algorithm" 
  href="http://en.wikipedia.org/wiki/Approximation_algorithm">approximation 
  algorithms</A> seek an approximation that is close to the true solution. 
  Approximation may use either a deterministic or a random strategy. Such 
  algorithms have practical value for many hard problems. </LI></UL>
<P><A id=Classification_by_design_paradigm 
name=Classification_by_design_paradigm></A></P>
<H3><SPAN class=editsection>[<A 
title="Edit section: Classification by design paradigm" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=11">edit</A>]</SPAN> 
<SPAN class=mw-headline>Classification by design paradigm</SPAN></H3>
<P>Another way of classifying algorithms is by their design methodology or 
paradigm. There is a certain number of paradigms, each different from the other. 
Furthermore, each of these categories will include many different types of 
algorithms. Some commonly found paradigms include:</P>
<UL>
  <LI><B>Divide and conquer</B>. A <A title="Divide and conquer algorithm" 
  href="http://en.wikipedia.org/wiki/Divide_and_conquer_algorithm">divide and 
  conquer algorithm</A> repeatedly reduces an instance of a problem to one or 
  more smaller instances of the same problem (usually <A title=Recursion 
  href="http://en.wikipedia.org/wiki/Recursion">recursively</A>), until the 
  instances are small enough to solve easily. One such example of divide and 
  conquer is <A class=mw-redirect title=Mergesort 
  href="http://en.wikipedia.org/wiki/Mergesort">merge sorting</A>. Sorting can 
  be done on each segment of data after dividing data into segments and sorting 
  of entire data can be obtained in conquer phase by merging them. A simpler 
  variant of divide and conquer is called <B>decrease and conquer algorithm</B>, 
  that solves an identical subproblem and uses the solution of this subproblem 
  to solve the bigger problem. Divide and conquer divides the problem into 
  multiple subproblems and so conquer stage will be more complex than decrease 
  and conquer algorithms. An example of decrease and conquer algorithm is <A 
  title="Binary search algorithm" 
  href="http://en.wikipedia.org/wiki/Binary_search_algorithm">binary search 
  algorithm</A>. 
  <LI><B><A title="Dynamic programming" 
  href="http://en.wikipedia.org/wiki/Dynamic_programming">Dynamic 
  programming</A></B>. When a problem shows <A title="Optimal substructure" 
  href="http://en.wikipedia.org/wiki/Optimal_substructure">optimal 
  substructure</A>, meaning the optimal solution to a problem can be constructed 
  from optimal solutions to subproblems, and <A class=mw-redirect 
  title="Overlapping subproblems" 
  href="http://en.wikipedia.org/wiki/Overlapping_subproblems">overlapping 
  subproblems</A>, meaning the same subproblems are used to solve many different 
  problem instances, a quicker approach called <I>dynamic programming</I> avoids 
  recomputing solutions that have already been computed. For example, the 
  shortest path to a goal from a vertex in a weighted <A 
  title="Graph (mathematics)" 
  href="http://en.wikipedia.org/wiki/Graph_(mathematics)">graph</A> can be found 
  by using the shortest path to the goal from all adjacent vertices. Dynamic 
  programming and <A title=Memoization 
  href="http://en.wikipedia.org/wiki/Memoization">memoization</A> go together. 
  The main difference between dynamic programming and divide and conquer is that 
  subproblems are more or less independent in divide and conquer, whereas 
  subproblems overlap in dynamic programming. The difference between dynamic 
  programming and straightforward recursion is in caching or memoization of 
  recursive calls. When subproblems are independent and there is no repetition, 
  memoization does not help; hence dynamic programming is not a solution for all 
  complex problems. By using memoization or maintaining a <A 
  title="Mathematical table" 
  href="http://en.wikipedia.org/wiki/Mathematical_table">table</A> of 
  subproblems already solved, dynamic programming reduces the exponential nature 
  of many problems to polynomial complexity. 
  <LI><B>The greedy method</B>. A <A title="Greedy algorithm" 
  href="http://en.wikipedia.org/wiki/Greedy_algorithm">greedy algorithm</A> is 
  similar to a <A title="Dynamic programming" 
  href="http://en.wikipedia.org/wiki/Dynamic_programming">dynamic programming 
  algorithm</A>, but the difference is that solutions to the subproblems do not 
  have to be known at each stage; instead a "greedy" choice can be made of what 
  looks best for the moment. The greedy method extends the solution with the 
  best possible decision (not all feasible decisions) at an algorithmic stage 
  based on the current local optimum and the best decision (not all possible 
  decisions) made in previous stage. It is not exhaustive, and does not give 
  accurate answer to many problems. But when it works, it will be the fastest 
  method. The most popular greedy algorithm is finding the minimal spanning tree 
  as given by <A title="Kruskal's algorithm" 
  href="http://en.wikipedia.org/wiki/Kruskal%27s_algorithm">Kruskal</A>. 
  <LI><B>Linear programming</B>. When solving a problem using <A 
  title="Linear programming" 
  href="http://en.wikipedia.org/wiki/Linear_programming">linear programming</A>, 
  specific <A title=Inequality 
  href="http://en.wikipedia.org/wiki/Inequality">inequalities</A> involving the 
  inputs are found and then an attempt is made to maximize (or minimize) some 
  linear function of the inputs. Many problems (such as the <A 
  title="Maximum flow problem" 
  href="http://en.wikipedia.org/wiki/Maximum_flow_problem">maximum flow</A> for 
  directed <A title="Graph (mathematics)" 
  href="http://en.wikipedia.org/wiki/Graph_(mathematics)">graphs</A>) can be 
  stated in a linear programming way, and then be solved by a 'generic' 
  algorithm such as the <A title="Simplex algorithm" 
  href="http://en.wikipedia.org/wiki/Simplex_algorithm">simplex algorithm</A>. A 
  more complex variant of linear programming is called integer programming, 
  where the solution space is restricted to the <A class=mw-redirect 
  title=Integers href="http://en.wikipedia.org/wiki/Integers">integers</A>. 
  <LI><B><A title="Reduction (complexity)" 
  href="http://en.wikipedia.org/wiki/Reduction_(complexity)">Reduction</A></B>. 
  This technique involves solving a difficult problem by transforming it into a 
  better known problem for which we have (hopefully) <A 
  title="Asymptotically optimal" 
  href="http://en.wikipedia.org/wiki/Asymptotically_optimal">asymptotically 
  optimal</A> algorithms. The goal is to find a reducing algorithm whose <A 
  title="Computational complexity theory" 
  href="http://en.wikipedia.org/wiki/Computational_complexity_theory">complexity</A> 
  is not dominated by the resulting reduced algorithm's. For example, one <A 
  title="Selection algorithm" 
  href="http://en.wikipedia.org/wiki/Selection_algorithm">selection 
  algorithm</A> for finding the median in an unsorted list involves first 
  sorting the list (the expensive portion) and then pulling out the middle 
  element in the sorted list (the cheap portion). This technique is also known 
  as <I>transform and conquer</I>. 
  <LI><B>Search and enumeration</B>. Many problems (such as playing <A 
  title=Chess href="http://en.wikipedia.org/wiki/Chess">chess</A>) can be 
  modeled as problems on <A title="Graph theory" 
  href="http://en.wikipedia.org/wiki/Graph_theory">graphs</A>. A <A 
  class=mw-redirect title="Graph exploration algorithm" 
  href="http://en.wikipedia.org/wiki/Graph_exploration_algorithm">graph 
  exploration algorithm</A> specifies rules for moving around a graph and is 
  useful for such problems. This category also includes <A 
  title="Search algorithm" 
  href="http://en.wikipedia.org/wiki/Search_algorithm">search algorithms</A>, <A 
  title="Branch and bound" 
  href="http://en.wikipedia.org/wiki/Branch_and_bound">branch and bound</A> 
  enumeration and <A title=Backtracking 
  href="http://en.wikipedia.org/wiki/Backtracking">backtracking</A>. 
  <LI><B>The probabilistic and heuristic paradigm</B>. Algorithms belonging to 
  this class fit the definition of an algorithm more loosely. </LI></UL>
<OL>
  <LI><A class=mw-redirect title="Probabilistic algorithm" 
  href="http://en.wikipedia.org/wiki/Probabilistic_algorithm">Probabilistic 
  algorithms</A> are those that make some choices randomly (or pseudo-randomly); 
  for some problems, it can in fact be proven that the fastest solutions must 
  involve some <A title=Randomness 
  href="http://en.wikipedia.org/wiki/Randomness">randomness</A>. 
  <LI><A title="Genetic algorithm" 
  href="http://en.wikipedia.org/wiki/Genetic_algorithm">Genetic algorithms</A> 
  attempt to find solutions to problems by mimicking biological <A 
  title=Evolution href="http://en.wikipedia.org/wiki/Evolution">evolutionary</A> 
  processes, with a cycle of random mutations yielding successive generations of 
  "solutions". Thus, they emulate reproduction and "survival of the fittest". In 
  <A title="Genetic programming" 
  href="http://en.wikipedia.org/wiki/Genetic_programming">genetic 
  programming</A>, this approach is extended to algorithms, by regarding the 
  algorithm itself as a "solution" to a problem. 
  <LI><A title=Heuristic 
  href="http://en.wikipedia.org/wiki/Heuristic">Heuristic</A> algorithms, whose 
  general purpose is not to find an optimal solution, but an approximate 
  solution where the time or resources are limited. They are not practical to 
  find perfect solutions. An example of this would be <A 
  title="Local search (optimization)" 
  href="http://en.wikipedia.org/wiki/Local_search_(optimization)">local 
  search</A>, <A title="Tabu search" 
  href="http://en.wikipedia.org/wiki/Tabu_search">tabu search</A>, or <A 
  title="Simulated annealing" 
  href="http://en.wikipedia.org/wiki/Simulated_annealing">simulated 
  annealing</A> algorithms, a class of heuristic probabilistic algorithms that 
  vary the solution of a problem by a random amount. The name "<A 
  title="Simulated annealing" 
  href="http://en.wikipedia.org/wiki/Simulated_annealing">simulated 
  annealing</A>" alludes to the metallurgic term meaning the heating and cooling 
  of metal to achieve freedom from defects. The purpose of the random variance 
  is to find close to globally optimal solutions rather than simply locally 
  optimal ones, the idea being that the random element will be decreased as the 
  algorithm settles down to a solution. </LI></OL>
<P><A id=Classification_by_field_of_study 
name=Classification_by_field_of_study></A></P>
<H3><SPAN class=editsection>[<A 
title="Edit section: Classification by field of study" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=12">edit</A>]</SPAN> 
<SPAN class=mw-headline>Classification by field of study</SPAN></H3>
<DL>
  <DD><SPAN class="boilerplate seealso"><I>See also: <A 
  title="List of algorithms" 
  href="http://en.wikipedia.org/wiki/List_of_algorithms">List of 
  algorithms</A></I></SPAN> </DD></DL>
<P>Every field of science has its own problems and needs efficient algorithms. 
Related problems in one field are often studied together. Some example classes 
are <A title="Search algorithm" 
href="http://en.wikipedia.org/wiki/Search_algorithm">search algorithms</A>, <A 
title="Sorting algorithm" 
href="http://en.wikipedia.org/wiki/Sorting_algorithm">sorting algorithms</A>, <A 
title="Merge algorithm" 
href="http://en.wikipedia.org/wiki/Merge_algorithm">merge algorithms</A>, <A 
title="Numerical analysis" 
href="http://en.wikipedia.org/wiki/Numerical_analysis">numerical algorithms</A>, 
<A title="Graph theory" href="http://en.wikipedia.org/wiki/Graph_theory">graph 
algorithms</A>, <A class=mw-redirect title="String algorithms" 
href="http://en.wikipedia.org/wiki/String_algorithms">string algorithms</A>, <A 
title="Computational geometry" 
href="http://en.wikipedia.org/wiki/Computational_geometry">computational 
geometric algorithms</A>, <A class=mw-redirect title=Combinatorial 
href="http://en.wikipedia.org/wiki/Combinatorial">combinatorial algorithms</A>, 
<A title="Machine learning" 
href="http://en.wikipedia.org/wiki/Machine_learning">machine learning</A>, <A 
title=Cryptography 
href="http://en.wikipedia.org/wiki/Cryptography">cryptography</A>, <A 
title="Data compression" 
href="http://en.wikipedia.org/wiki/Data_compression">data compression</A> 
algorithms and <A title=Parsing 
href="http://en.wikipedia.org/wiki/Parsing">parsing techniques</A>.</P>
<P>Fields tend to overlap with each other, and algorithm advances in one field 
may improve those of other, sometimes completely unrelated, fields. For example, 
dynamic programming was originally invented for optimization of resource 
consumption in industry, but is now used in solving a broad range of problems in 
many fields.</P>
<P><A id=Classification_by_complexity name=Classification_by_complexity></A></P>
<H3><SPAN class=editsection>[<A 
title="Edit section: Classification by complexity" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=13">edit</A>]</SPAN> 
<SPAN class=mw-headline>Classification by complexity</SPAN></H3>
<DL>
  <DD><SPAN class="boilerplate seealso"><I>See also: <A title="Complexity class" 
  href="http://en.wikipedia.org/wiki/Complexity_class">Complexity 
  class</A>&nbsp;and <A class=new 
  title="Parameterized Complexity (page does not exist)" 
  href="http://en.wikipedia.org/w/index.php?title=Parameterized_Complexity&amp;action=edit&amp;redlink=1">Parameterized 
  Complexity</A></I></SPAN> </DD></DL>
<P>Algorithms can be classified by the amount of time they need to complete 
compared to their input size. There is a wide variety: some algorithms complete 
in linear time relative to input size, some do so in an exponential amount of 
time or even worse, and some never halt. Additionally, some problems may have 
multiple algorithms of differing complexity, while other problems might have no 
algorithms or no known efficient algorithms. There are also mappings from some 
problems to other problems. Owing to this, it was found to be more suitable to 
classify the problems themselves instead of the algorithms into equivalence 
classes based on the complexity of the best possible algorithms for them.</P>
<P><A id=Classification_by_computing_power 
name=Classification_by_computing_power></A></P>
<H3><SPAN class=editsection>[<A 
title="Edit section: Classification by computing power" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=14">edit</A>]</SPAN> 
<SPAN class=mw-headline>Classification by computing power</SPAN></H3>
<P>Another way to classify algorithms is by computing power. This is typically 
done by considering some collection (class) of algorithms. A recursive class of 
algorithms is one that includes algorithms for all Turing computable functions. 
Looking at classes of algorithms allows for the possibility of restricting the 
available computational resources (time and memory) used in a computation. A 
subrecursive class of algorithms is one in which not all Turing computable 
functions can be obtained. For example, the algorithms that run in <A 
title="P (complexity)" 
href="http://en.wikipedia.org/wiki/P_(complexity)">polynomial time</A> suffice 
for many important types of computation but do not exhaust all Turing computable 
functions. The class of algorithms implemented by <A 
title="Primitive recursive function" 
href="http://en.wikipedia.org/wiki/Primitive_recursive_function">primitive 
recursive functions</A> is another subrecursive class.</P>
<P>Burgin (2005, p. 24) uses a generalized definition of algorithms that relaxes 
the common requirement that the output of the algorithm that computes a function 
must be determined after a finite number of steps. He defines a super-recursive 
class of algorithms as "a class of algorithms in which it is possible to compute 
functions not computable by any Turing machine" (Burgin 2005, p. 107). This is 
closely related to the study of methods of <A title=Hypercomputation 
href="http://en.wikipedia.org/wiki/Hypercomputation">hypercomputation</A>.</P>
<P><A id=Legal_issues name=Legal_issues></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: Legal issues" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=15">edit</A>]</SPAN> 
<SPAN class=mw-headline>Legal issues</SPAN></H2>
<DL>
  <DD><I>See also: <A class=mw-redirect title="Software patents" 
  href="http://en.wikipedia.org/wiki/Software_patents">Software patents</A> for 
  a general overview of the patentability of software, including 
  computer-implemented algorithms.</I> </DD></DL>
<P>Algorithms, by themselves, are not usually patentable. In the United States, 
a claim consisting solely of simple manipulations of abstract concepts, numbers, 
or signals do not constitute "processes" (USPTO 2006) and hence algorithms are 
not patentable (as in <A title="Gottschalk v. Benson" 
href="http://en.wikipedia.org/wiki/Gottschalk_v._Benson">Gottschalk v. 
Benson</A>). However, practical applications of algorithms are sometimes 
patentable. For example, in <A title="Diamond v. Diehr" 
href="http://en.wikipedia.org/wiki/Diamond_v._Diehr">Diamond v. Diehr</A>, the 
application of a simple <A title=Feedback 
href="http://en.wikipedia.org/wiki/Feedback">feedback</A> algorithm to aid in 
the curing of <A title="Synthetic rubber" 
href="http://en.wikipedia.org/wiki/Synthetic_rubber">synthetic rubber</A> was 
deemed patentable. The <A title="Software patent debate" 
href="http://en.wikipedia.org/wiki/Software_patent_debate">patenting of 
software</A> is highly controversial, and there are highly criticized patents 
involving algorithms, especially <A title="Data compression" 
href="http://en.wikipedia.org/wiki/Data_compression">data compression</A> 
algorithms, such as <A title=Unisys 
href="http://en.wikipedia.org/wiki/Unisys">Unisys</A>' <A 
title="Graphics Interchange Format" 
href="http://en.wikipedia.org/wiki/Graphics_Interchange_Format#Unisys_and_LZW_patent_enforcement">LZW 
patent</A>.</P>
<P>Additionally, some cryptographic algorithms have export restrictions (see <A 
title="Export of cryptography" 
href="http://en.wikipedia.org/wiki/Export_of_cryptography">export of 
cryptography</A>).</P>
<P><A id=History:_Development_of_the_notion_of_.22algorithm.22 
name=History:_Development_of_the_notion_of_.22algorithm.22></A></P>
<H2><SPAN class=editsection>[<A 
title='Edit section: History: Development of the notion of "algorithm"' 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=16">edit</A>]</SPAN> 
<SPAN class=mw-headline>History: Development of the notion of 
"algorithm"</SPAN></H2>
<P><A id=Origin_of_the_word name=Origin_of_the_word></A></P>
<H3><SPAN class=editsection>[<A title="Edit section: Origin of the word" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=17">edit</A>]</SPAN> 
<SPAN class=mw-headline>Origin of the word</SPAN></H3>
<DL>
  <DD><SPAN class="boilerplate seealso"><I>See also: <A 
  title="Timeline of algorithms" 
  href="http://en.wikipedia.org/wiki/Timeline_of_algorithms">Timeline of 
  algorithms</A></I></SPAN> </DD></DL>
<P>The word <I>algorithm</I> comes from the name of the 9th century <A 
title="Persian people" 
href="http://en.wikipedia.org/wiki/Persian_people">Persian</A> mathematician <A 
class=mw-redirect title=Al-Khwarizmi 
href="http://en.wikipedia.org/wiki/Al-Khwarizmi">Abu Abdullah Muhammad ibn Musa 
al-Khwarizmi</A> whose works introduced Indian numerals and algebraic concepts. 
He worked in <A title=Baghdad 
href="http://en.wikipedia.org/wiki/Baghdad">Baghdad</A> at the time when it was 
the centre of scientific studies and trade. The word <I><A title=Algorism 
href="http://en.wikipedia.org/wiki/Algorism">algorism</A></I> originally 
referred only to the rules of performing <A title=Arithmetic 
href="http://en.wikipedia.org/wiki/Arithmetic">arithmetic</A> using <A 
title="Hindu-Arabic numeral system" 
href="http://en.wikipedia.org/wiki/Hindu-Arabic_numeral_system">Arabic 
numerals</A> but evolved via European Latin translation of al-Khwarizmi's name 
into <I>algorithm</I> by the 18th century. The word evolved to include all 
definite procedures for solving problems or performing tasks.</P>
<P><A id=Discrete_and_distinguishable_symbols 
name=Discrete_and_distinguishable_symbols></A></P>
<H3><SPAN class=editsection>[<A 
title="Edit section: Discrete and distinguishable symbols" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=18">edit</A>]</SPAN> 
<SPAN class=mw-headline>Discrete and distinguishable symbols</SPAN></H3>
<P><B>Tally-marks</B>: To keep track of their flocks, their sacks of grain and 
their money the ancients used tallying: accumulating stones or marks scratched 
on sticks, or making discrete symbols in clay. Through the Babylonian and 
Egyptian use of marks and symbols, eventually <A title="Roman numerals" 
href="http://en.wikipedia.org/wiki/Roman_numerals">Roman numerals</A> and the <A 
title=Abacus href="http://en.wikipedia.org/wiki/Abacus">abacus</A> evolved 
(Dilson, p.16–41). Tally marks appear prominently in <A 
title="Unary numeral system" 
href="http://en.wikipedia.org/wiki/Unary_numeral_system">unary numeral 
system</A> arithmetic used in <A title="Turing machine" 
href="http://en.wikipedia.org/wiki/Turing_machine">Turing machine</A> and <A 
class=mw-redirect title="Post-Turing machine" 
href="http://en.wikipedia.org/wiki/Post-Turing_machine">Post-Turing machine</A> 
computations.</P>
<P><A id=Manipulation_of_symbols_as_.22place_holders.22_for_numbers:_algebra 
name=Manipulation_of_symbols_as_.22place_holders.22_for_numbers:_algebra></A></P>
<H3><SPAN class=editsection>[<A 
title='Edit section: Manipulation of symbols as "place holders" for numbers: algebra' 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=19">edit</A>]</SPAN> 
<SPAN class=mw-headline>Manipulation of symbols as "place holders" for numbers: 
algebra</SPAN></H3>
<P>The work of the ancient <A title="Greek mathematics" 
href="http://en.wikipedia.org/wiki/Greek_mathematics">Greek geometers</A>, <A 
class=mw-redirect title="Islamic mathematics" 
href="http://en.wikipedia.org/wiki/Islamic_mathematics">Persian 
mathematician</A> <A title="Muhammad ibn Mūsā al-Khwārizmī" 
href="http://en.wikipedia.org/wiki/Muhammad_ibn_M%C5%ABs%C4%81_al-Khw%C4%81rizm%C4%AB">Al-Khwarizmi</A> 
(often considered the "father of <A title=Algebra 
href="http://en.wikipedia.org/wiki/Algebra">algebra</A>" and from whose name the 
terms "<A title=Algorism 
href="http://en.wikipedia.org/wiki/Algorism">algorism</A>" and "algorithm" are 
derived), and Western European mathematicians culminated in <A class=mw-redirect 
title=Leibniz href="http://en.wikipedia.org/wiki/Leibniz">Leibniz</A>'s notion 
of the <A title="Calculus ratiocinator" 
href="http://en.wikipedia.org/wiki/Calculus_ratiocinator">calculus 
ratiocinator</A> (ca 1680):</P>
<DL>
  <DD>"A good century and a half ahead of his time, Leibniz proposed an algebra 
  of logic, an algebra that would specify the rules for manipulating logical 
  concepts in the manner that ordinary algebra specifies the rules for 
  manipulating numbers" (Davis 2000:1) </DD></DL>
<P><A id=Mechanical_contrivances_with_discrete_states 
name=Mechanical_contrivances_with_discrete_states></A></P>
<H3><SPAN class=editsection>[<A 
title="Edit section: Mechanical contrivances with discrete states" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=20">edit</A>]</SPAN> 
<SPAN class=mw-headline>Mechanical contrivances with discrete states</SPAN></H3>
<P><B>The clock</B>: Bolter credits the invention of the weight-driven <A 
title=Clock href="http://en.wikipedia.org/wiki/Clock">clock</A> as “The key 
invention [of Europe in the Middle Ages]", in particular the <A 
title="Verge escapement" 
href="http://en.wikipedia.org/wiki/Verge_escapement">verge escapement</A> 
(Bolter 1984:24) that provides us with the tick and tock of a mechanical clock. 
“The accurate automatic machine” (Bolter 1984:26) led immediately to "mechanical 
<A title=Automata href="http://en.wikipedia.org/wiki/Automata">automata</A>" 
beginning in the thirteenth century and finally to “computational machines" – 
the <A title="Difference engine" 
href="http://en.wikipedia.org/wiki/Difference_engine">difference engine</A> and 
<A title="Analytical engine" 
href="http://en.wikipedia.org/wiki/Analytical_engine">analytical engines</A> of 
<A title="Charles Babbage" 
href="http://en.wikipedia.org/wiki/Charles_Babbage">Charles Babbage</A> and 
Countess <A title="Ada Lovelace" 
href="http://en.wikipedia.org/wiki/Ada_Lovelace">Ada Lovelace</A> (Bolter 
p.33–34, p.204–206).</P>
<P><B>Jacquard loom, Hollerith punch cards, telegraphy and telephony — the 
electromechanical relay</B>: Bell and Newell (1971) indicate that the <A 
title="Jacquard loom" href="http://en.wikipedia.org/wiki/Jacquard_loom">Jacquard 
loom</A> (1801), precursor to <A class=mw-redirect title="Hollerith cards" 
href="http://en.wikipedia.org/wiki/Hollerith_cards">Hollerith cards</A> (punch 
cards, 1887), and “telephone switching technologies” were the roots of a tree 
leading to the development of the first computers (Bell and Newell diagram p. 
39, cf Davis 2000). By the mid-1800s the <A class=mw-redirect title=Telegraph 
href="http://en.wikipedia.org/wiki/Telegraph">telegraph</A>, the precursor of 
the telephone, was in use throughout the world, its discrete and distinguishable 
encoding of letters as “dots and dashes” a common sound. By the late 1800s the 
<A title="Ticker tape" href="http://en.wikipedia.org/wiki/Ticker_tape">ticker 
tape</A> (ca 1870s) was in use, as was the use of <A class=mw-redirect 
title="Hollerith cards" 
href="http://en.wikipedia.org/wiki/Hollerith_cards">Hollerith cards</A> in the 
1890 U.S. census. Then came the <A class=mw-redirect title=Teletype 
href="http://en.wikipedia.org/wiki/Teletype">Teletype</A> (ca 1910) with its 
punched-paper use of <A title="Baudot code" 
href="http://en.wikipedia.org/wiki/Baudot_code">Baudot code</A> on tape.</P>
<P>Telephone-switching networks of electromechanical <A title=Relay 
href="http://en.wikipedia.org/wiki/Relay">relays</A> (invented 1835) was behind 
the work of <A title="George Stibitz" 
href="http://en.wikipedia.org/wiki/George_Stibitz">George Stibitz</A> (1937), 
the inventor of the digital adding device. As he worked in Bell Laboratories, he 
observed the “burdensome’ use of mechanical calculators with gears. "He went 
home one evening in 1937 intending to test his idea.... When the tinkering was 
over, Stibitz had constructed a binary adding device". (Valley News, p. 13).</P>
<P>Davis (2000) observes the particular importance of the electromechanical 
relay (with its two "binary states" <I>open</I> and <I>closed</I>):</P>
<DL>
  <DD>It was only with the development, beginning in the 1930s, of 
  electromechanical calculators using electrical relays, that machines were 
  built having the scope Babbage had envisioned." (Davis, p. 14). </DD></DL>
<P><A id=Mathematics_during_the_1800s_up_to_the_mid-1900s 
name=Mathematics_during_the_1800s_up_to_the_mid-1900s></A></P>
<H3><SPAN class=editsection>[<A 
title="Edit section: Mathematics during the 1800s up to the mid-1900s" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=21">edit</A>]</SPAN> 
<SPAN class=mw-headline>Mathematics during the 1800s up to the 
mid-1900s</SPAN></H3>
<P><B>Symbols and rules</B>: In rapid succession the mathematics of <A 
title="George Boole" href="http://en.wikipedia.org/wiki/George_Boole">George 
Boole</A> (1847, 1854), <A title="Gottlob Frege" 
href="http://en.wikipedia.org/wiki/Gottlob_Frege">Gottlob Frege</A> (1879), and 
<A title="Giuseppe Peano" 
href="http://en.wikipedia.org/wiki/Giuseppe_Peano">Giuseppe Peano</A> 
(1888–1889) reduced arithmetic to a sequence of symbols manipulated by rules. 
Peano's <I>The principles of arithmetic, presented by a new method</I> (1888) 
was "the first attempt at an axiomatization of mathematics in a symbolic 
language" (van Heijenoort:81ff).</P>
<P>But Heijenoort gives Frege (1879) this kudos: Frege’s is "perhaps the most 
important single work ever written in logic. ... in which we see a " 'formula 
language', that is a <I>lingua characterica</I>, a language written with special 
symbols, "for pure thought", that is, free from rhetorical embellishments ... 
constructed from specific symbols that are manipulated according to definite 
rules" (van Heijenoort:1). The work of Frege was further simplified and 
amplified by <A title="Alfred North Whitehead" 
href="http://en.wikipedia.org/wiki/Alfred_North_Whitehead">Alfred North 
Whitehead</A> and <A title="Bertrand Russell" 
href="http://en.wikipedia.org/wiki/Bertrand_Russell">Bertrand Russell</A> in 
their <A title="Principia Mathematica" 
href="http://en.wikipedia.org/wiki/Principia_Mathematica">Principia 
Mathematica</A> (1910–1913).</P>
<P><B>The paradoxes</B>: At the same time a number of disturbing paradoxes 
appeared in the literature, in particular the <A title="Burali-Forti paradox" 
href="http://en.wikipedia.org/wiki/Burali-Forti_paradox">Burali-Forti 
paradox</A> (1897), the <A class=mw-redirect title="Russell paradox" 
href="http://en.wikipedia.org/wiki/Russell_paradox">Russell paradox</A> 
(1902–03), and the <A class=mw-redirect title="Richard Paradox" 
href="http://en.wikipedia.org/wiki/Richard_Paradox">Richard Paradox</A> (Dixon 
1906, cf Kleene 1952:36–40). The resultant considerations led to <A 
title="Kurt Gödel" href="http://en.wikipedia.org/wiki/Kurt_G%C3%B6del">Kurt 
Gödel</A>’s paper (1931) — he specifically cites the paradox of the liar — that 
completely reduces rules of <A title=Recursion 
href="http://en.wikipedia.org/wiki/Recursion">recursion</A> to numbers.</P>
<P><B>Effective calculability</B>: In an effort to solve the <A 
title=Entscheidungsproblem 
href="http://en.wikipedia.org/wiki/Entscheidungsproblem">Entscheidungsproblem</A> 
defined precisely by Hilbert in 1928, mathematicians first set about to define 
what was meant by an "effective method" or "effective calculation" or "effective 
calculability" (i.e., a calculation that would succeed). In rapid succession the 
following appeared: <A title="Alonzo Church" 
href="http://en.wikipedia.org/wiki/Alonzo_Church">Alonzo Church</A>, <A 
class=mw-redirect title="Stephen Kleene" 
href="http://en.wikipedia.org/wiki/Stephen_Kleene">Stephen Kleene</A> and <A 
class=mw-redirect title="J.B. Rosser" 
href="http://en.wikipedia.org/wiki/J.B._Rosser">J.B. Rosser</A>'s <A 
class=mw-redirect title=Λ-calculus 
href="http://en.wikipedia.org/wiki/%CE%9B-calculus">λ-calculus</A>, (cf footnote 
in <A title="Alonzo Church" 
href="http://en.wikipedia.org/wiki/Alonzo_Church">Alonzo Church</A> 1936a:90, 
1936b:110) a finely-honed definition of "general recursion" from the work of 
Gödel acting on suggestions of <A title="Jacques Herbrand" 
href="http://en.wikipedia.org/wiki/Jacques_Herbrand">Jacques Herbrand</A> (cf 
Gödel's Princeton lectures of 1934) and subsequent simplifications by Kleene 
(1935-6:237ff, 1943:255ff). Church's proof (1936:88ff) that the <A 
title=Entscheidungsproblem 
href="http://en.wikipedia.org/wiki/Entscheidungsproblem">Entscheidungsproblem</A> 
was unsolvable, <A class=mw-redirect title="Emil Post" 
href="http://en.wikipedia.org/wiki/Emil_Post">Emil Post</A>'s definition of 
effective calculability as a worker mindlessly following a list of instructions 
to move left or right through a sequence of rooms and while there either mark or 
erase a paper or observe the paper and make a yes-no decision about the next 
instruction (cf "Formulation I", Post 1936:289-290). <A title="Alan Turing" 
href="http://en.wikipedia.org/wiki/Alan_Turing">Alan Turing</A>'s proof of that 
the Entscheidungsproblem was unsolvable by use of his "a- [automatic-] 
machine"(Turing 1936-7:116ff) -- in effect almost identical to Post's 
"formulation", <A title="J. Barkley Rosser" 
href="http://en.wikipedia.org/wiki/J._Barkley_Rosser">J. Barkley Rosser</A>'s 
definition of "effective method" in terms of "a machine" (Rosser 1939:226). <A 
class=mw-redirect title="S. C. Kleene" 
href="http://en.wikipedia.org/wiki/S._C._Kleene">S. C. Kleene</A>'s proposal of 
a precursor to "<A class=mw-redirect title="Church thesis" 
href="http://en.wikipedia.org/wiki/Church_thesis">Church thesis</A>" that he 
called "Thesis I" (Kleene 1943:273–274), and a few years later Kleene's renaming 
his Thesis "Church's Thesis" (Kleene 1952:300, 317) and proposing "Turing's 
Thesis" (Kleene 1952:376).</P>
<P><A id=Emil_Post_.281936.29_and_Alan_Turing_.281936-7.2C_1939.29 
name=Emil_Post_.281936.29_and_Alan_Turing_.281936-7.2C_1939.29></A></P>
<H3><SPAN class=editsection>[<A 
title="Edit section: Emil Post (1936) and Alan Turing (1936-7, 1939)" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=22">edit</A>]</SPAN> 
<SPAN class=mw-headline>Emil Post (1936) and Alan Turing (1936-7, 
1939)</SPAN></H3>
<P>Here is a remarkable coincidence of two men not knowing each other but 
describing a process of men-as-computers working on computations — and they 
yield virtually identical definitions.</P>
<P><A class=mw-redirect title="Emil Post" 
href="http://en.wikipedia.org/wiki/Emil_Post">Emil Post</A> (1936) described the 
actions of a "computer" (human being) as follows:</P>
<DL>
  <DD>"...two concepts are involved: that of a <I>symbol space</I> in which the 
  work leading from problem to answer is to be carried out, and a fixed 
  unalterable <I>set of directions</I>. </DD></DL>
<P>His symbol space would be</P>
<DL>
  <DD>"a two way infinite sequence of spaces or boxes... The problem solver or 
  worker is to move and work in this symbol space, being capable of being in, 
  and operating in but one box at a time.... a box is to admit of but two 
  possible conditions, i.e., being empty or unmarked, and having a single mark 
  in it, say a vertical stroke. </DD></DL>
<DL>
  <DD>"One box is to be singled out and called the starting point. ...a specific 
  problem is to be given in symbolic form by a finite number of boxes [i.e., 
  INPUT] being marked with a stroke. Likewise the answer [i.e., OUTPUT] is to be 
  given in symbolic form by such a configuration of marked boxes.... </DD></DL>
<DL>
  <DD>"A set of directions applicable to a general problem sets up a 
  deterministic process when applied to each specific problem. This process will 
  terminate only when it comes to the direction of type (C ) [i.e., STOP]." (U 
  p. 289–290) See more at <A class=mw-redirect title="Post-Turing machine" 
  href="http://en.wikipedia.org/wiki/Post-Turing_machine">Post-Turing 
  machine</A> </DD></DL>
<P><A title="Alan Turing" href="http://en.wikipedia.org/wiki/Alan_Turing">Alan 
Turing</A>’s work (1936, 1939:160) preceded that of Stibitz (1937); it is 
unknown whether Stibitz knew of the work of Turing. Turing’s biographer believed 
that Turing’s use of a typewriter-like model derived from a youthful interest: 
“Alan had dreamt of inventing typewriters as a boy; Mrs. Turing had a 
typewriter; and he could well have begun by asking himself what was meant by 
calling a typewriter 'mechanical'" (Hodges, p. 96). Given the prevalence of 
Morse code and telegraphy, ticker tape machines, and Teletypes we might 
conjecture that all were influences.</P>
<P>Turing — his model of computation is now called a <A title="Turing machine" 
href="http://en.wikipedia.org/wiki/Turing_machine">Turing machine</A> — begins, 
as did Post, with an analysis of a human computer that he whittles down to a 
simple set of basic motions and "states of mind". But he continues a step 
further and creates a machine as a model of computation of numbers (Turing 
1936-7:116).</P>
<DL>
  <DD>"Computing is normally done by writing certain symbols on paper. We may 
  suppose this paper is divided into squares like a child's arithmetic book....I 
  assume then that the computation is carried out on one-dimensional paper, 
  i.e., on a tape divided into squares. I shall also suppose that the number of 
  symbols which may be printed is finite.... </DD></DL>
<DL>
  <DD>"The behavior of the computer at any moment is determined by the symbols 
  which he is observing, and his "state of mind" at that moment. We may suppose 
  that there is a bound B to the number of symbols or squares which the computer 
  can observe at one moment. If he wishes to observe more, he must use 
  successive observations. We will also suppose that the number of states of 
  mind which need be taken into account is finite... </DD></DL>
<DL>
  <DD>"Let us imagine that the operations performed by the computer to be split 
  up into 'simple operations' which are so elementary that it is not easy to 
  imagine them further divided" (Turing 1936-7:136). </DD></DL>
<P>Turing's reduction yields the following:</P>
<DL>
  <DD>"The simple operations must therefore include: 
  <DL>
    <DD>"(a) Changes of the symbol on one of the observed squares 
    <DD>"(b) Changes of one of the squares observed to another square within L 
    squares of one of the previously observed squares. </DD></DL></DD></DL>
<P>"It may be that some of these change necessarily invoke a change of state of 
mind. The most general single operation must therefore be taken to be one of the 
following:</P>
<DL>
  <DD>
  <DL>
    <DD>"(A) A possible change (a) of symbol together with a possible change of 
    state of mind. 
    <DD>"(B) A possible change (b) of observed squares, together with a possible 
    change of state of mind" </DD></DL></DD></DL>
<DL>
  <DD>"We may now construct a machine to do the work of this computer." (Turing 
  1936-7:136) </DD></DL>
<P>A few years later, Turing expanded his analysis (thesis, definition) with 
this forceful expression of it:</P>
<DL>
  <DD>"A function is said to be "effectively calculable" if its values can be 
  found by some purely mechanical process. Although it is fairly easy to get an 
  intuitive grasp of this idea, it is neverthessless desirable to have some more 
  definite, mathematical expressible definition . . . [he discusses the history 
  of the definition pretty much as presented above with respect to Gödel, 
  Herbrand, Kleene, Church, Turing and Post] . . . We may take this statement 
  literally, understanding by a purely mechanical process one which could be 
  carried out by a machine. It is possible to give a mathematical description, 
  in a certain normal form, of the structures of these machines. The development 
  of these ideas leads to the author's definition of a computable function, and 
  to an identification of computability † with effective calculability . . . . 
  <DL>
    <DD>"† We shall use the expression "computable function" to mean a function 
    calculable by a machine, and we let "effectively calculabile" refer to the 
    intuitive idea without particular identification with any one of these 
    definitions."(Turing 1939:160) </DD></DL></DD></DL>
<P><A id=J._B._Rosser_.281939.29_and_S._C._Kleene_.281943.29 
name=J._B._Rosser_.281939.29_and_S._C._Kleene_.281943.29></A></P>
<H3><SPAN class=editsection>[<A 
title="Edit section: J. B. Rosser (1939) and S. C. Kleene (1943)" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=23">edit</A>]</SPAN> 
<SPAN class=mw-headline>J. B. Rosser (1939) and S. C. Kleene (1943)</SPAN></H3>
<P><B><A title="J. Barkley Rosser" 
href="http://en.wikipedia.org/wiki/J._Barkley_Rosser">J. Barkley Rosser</A></B> 
boldly defined an ‘effective [mathematical] method’ in the following manner 
(boldface added):</P>
<DL>
  <DD>"'Effective method' is used here in the rather special sense of a method 
  each step of which is precisely determined and which is certain to produce the 
  answer in a finite number of steps. With this special meaning, three different 
  precise definitions have been given to date. [his footnote #5; see discussion 
  immediately below]. The simplest of these to state (due to Post and Turing) 
  says essentially that <B>an effective method of solving certain sets of 
  problems exists if one can build a machine which will then solve any problem 
  of the set with no human intervention beyond inserting the question and 
  (later) reading the answer</B>. All three definitions are equivalent, so it 
  doesn't matter which one is used. Moreover, the fact that all three are 
  equivalent is a very strong argument for the correctness of any one." (Rosser 
  1939:225–6) </DD></DL>
<P>Rosser's footnote #5 references the work of (1) Church and Kleene and their 
definition of λ-definability, in particular Church's use of it in his <I>An 
Unsolvable Problem of Elementary Number Theory</I> (1936); (2) Herbrand and 
Gödel and their use of recursion in particular Gödel's use in his famous paper 
<I>On Formally Undecidable Propositions of Principia Mathematica and Related 
Systems I</I> (1931); and (3) Post (1936) and Turing (1936-7) in their 
mechanism-models of computation.</P>
<P><B><A class=mw-redirect title="Stephen C. Kleene" 
href="http://en.wikipedia.org/wiki/Stephen_C._Kleene">Stephen C. Kleene</A></B> 
defined as his now-famous "Thesis I" known as the <A class=mw-redirect 
title="Church-Turing thesis" 
href="http://en.wikipedia.org/wiki/Church-Turing_thesis">Church-Turing 
thesis</A>. But he did this in the following context (boldface in original):</P>
<DL>
  <DD>"12. <B>Algorithmic theories</B>... In setting up a complete algorithmic 
  theory, what we do is to describe a procedure, performable for each set of 
  values of the independent variables, which procedure necessarily terminates 
  and in such manner that from the outcome we can read a definite answer, "yes" 
  or "no," to the question, "is the predicate value true?”" (Kleene 1943:273) 
  </DD></DL>
<P><A id=History_after_1950 name=History_after_1950></A></P>
<H3><SPAN class=editsection>[<A title="Edit section: History after 1950" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=24">edit</A>]</SPAN> 
<SPAN class=mw-headline>History after 1950</SPAN></H3>
<P>A number of efforts have been directed toward further refinement of the 
definition of "algorithm", and activity is on-going because of issues 
surrounding, in particular, <A title="Foundations of mathematics" 
href="http://en.wikipedia.org/wiki/Foundations_of_mathematics">foundations of 
mathematics</A> (especially the <A class=mw-redirect 
title="Church-Turing Thesis" 
href="http://en.wikipedia.org/wiki/Church-Turing_Thesis">Church-Turing 
Thesis</A>) and <A title="Philosophy of mind" 
href="http://en.wikipedia.org/wiki/Philosophy_of_mind">philosophy of mind</A> 
(especially arguments around <A title="Artificial intelligence" 
href="http://en.wikipedia.org/wiki/Artificial_intelligence">artificial 
intelligence</A>). For more, see <A title="Algorithm characterizations" 
href="http://en.wikipedia.org/wiki/Algorithm_characterizations">Algorithm 
characterizations</A>.</P>
<DIV class="infobox sisterproject">
<DIV style="FLOAT: left">
<DIV class=floatnone><SPAN><A class=image title=Wikibooks 
href="http://en.wikipedia.org/wiki/Image:Wikibooks-logo-en.svg"><IMG height=57 
alt=Wikibooks src="Algorithm_files/50px-Wikibooks-logo-en.svg.png" width=50 
border=0></A></SPAN></DIV></DIV>
<DIV style="MARGIN-LEFT: 60px"><A title=Wikibooks 
href="http://en.wikipedia.org/wiki/Wikibooks">Wikibooks</A> has a book on the 
topic of 
<DIV style="MARGIN-LEFT: 10px"><I><B><A class=extiw title=wikibooks:Algorithms 
href="http://en.wikibooks.org/wiki/Algorithms">Algorithms</A></B></I></DIV></DIV></DIV>
<DIV class="infobox sisterproject">
<DIV style="FLOAT: left">
<DIV class=floatnone><SPAN><A class=image title=Wikiversity 
href="http://en.wikipedia.org/wiki/Image:Wikiversity-logo-Snorky.svg"><IMG 
height=45 alt=Wikiversity 
src="Algorithm_files/50px-Wikiversity-logo-Snorky.svg.png" width=50 
border=0></A></SPAN></DIV></DIV>
<DIV style="MARGIN-LEFT: 60px">At <A title=Wikiversity 
href="http://en.wikipedia.org/wiki/Wikiversity">Wikiversity</A> you can learn 
more and teach others about <B>Algorithm</B> at: 
<DIV style="MARGIN-LEFT: 10px"><A class=extiw title=v:Topic:Algorithm 
href="http://en.wikiversity.org/wiki/Topic:Algorithm">The Department of 
Algorithm</A></DIV></DIV></DIV>
<DIV style="-moz-column-count: 2; column-count: 2">
<UL>
  <LI><A title="Abstract machine" 
  href="http://en.wikipedia.org/wiki/Abstract_machine">Abstract machine</A> 
  <LI><A title="Algorithm characterizations" 
  href="http://en.wikipedia.org/wiki/Algorithm_characterizations">Algorithm 
  characterizations</A> 
  <LI><A title="Algorithm design" 
  href="http://en.wikipedia.org/wiki/Algorithm_design">Algorithm design</A> 
  <LI><A title="Algorithmic efficiency" 
  href="http://en.wikipedia.org/wiki/Algorithmic_efficiency">Algorithmic 
  efficiency</A> (describes ways of estimating, measuring and improving an 
  algorithms speed) 
  <LI><A title="Algorithm engineering" 
  href="http://en.wikipedia.org/wiki/Algorithm_engineering">Algorithm 
  engineering</A> 
  <LI><A title="Algorithm examples" 
  href="http://en.wikipedia.org/wiki/Algorithm_examples">Algorithm examples</A> 
  <LI><A class=mw-redirect title="Algorithmic music" 
  href="http://en.wikipedia.org/wiki/Algorithmic_music">Algorithmic music</A> 
  <LI><A title="Algorithmic trading" 
  href="http://en.wikipedia.org/wiki/Algorithmic_trading">Algorithmic 
  trading</A> 
  <LI><A title="Computability theory (computer science)" 
  href="http://en.wikipedia.org/wiki/Computability_theory_(computer_science)">Computability 
  theory (computer science)</A> 
  <LI><A title="Computational complexity theory" 
  href="http://en.wikipedia.org/wiki/Computational_complexity_theory">Computational 
  complexity theory</A> 
  <LI><A title="Data structure" 
  href="http://en.wikipedia.org/wiki/Data_structure">Data structure</A> 
  <LI><A class=mw-redirect title=Heuristics 
  href="http://en.wikipedia.org/wiki/Heuristics">Heuristics</A> 
  <LI><I><A title="Introduction to Algorithms" 
  href="http://en.wikipedia.org/wiki/Introduction_to_Algorithms">Introduction to 
  Algorithms</A></I> 
  <LI><A title="List of important publications in computer science" 
  href="http://en.wikipedia.org/wiki/List_of_important_publications_in_computer_science#Algorithms">Important 
  algorithm-related publications</A> 
  <LI><A title="List of algorithms" 
  href="http://en.wikipedia.org/wiki/List_of_algorithms">List of algorithms</A> 
  <LI><A title="List of algorithm general topics" 
  href="http://en.wikipedia.org/wiki/List_of_algorithm_general_topics">List of 
  algorithm general topics</A> 
  <LI><A title="List of terms relating to algorithms and data structures" 
  href="http://en.wikipedia.org/wiki/List_of_terms_relating_to_algorithms_and_data_structures">List 
  of terms relating to algorithms and data structures</A> 
  <LI><A title="Partial function" 
  href="http://en.wikipedia.org/wiki/Partial_function">Partial function</A> 
  <LI><A class=new title="Parameterized Complexity (page does not exist)" 
  href="http://en.wikipedia.org/w/index.php?title=Parameterized_Complexity&amp;action=edit&amp;redlink=1">Parameterized 
  Complexity</A> 
  <LI><A title="Performance analysis" 
  href="http://en.wikipedia.org/wiki/Performance_analysis">Performance 
  analysis</A> measuring the actual performance of an algorithm 
  <LI><A class=mw-redirect title="Run-time analysis" 
  href="http://en.wikipedia.org/wiki/Run-time_analysis">Run-time analysis</A> 
  (non-intuitive) estimation of run times, not analysis at run-time! (see <A 
  title="Performance analysis" 
  href="http://en.wikipedia.org/wiki/Performance_analysis">Performance 
  analysis</A> above 
  <LI><A title="Theory of computation" 
  href="http://en.wikipedia.org/wiki/Theory_of_computation">Theory of 
  computation</A> </LI></UL></DIV>
<P><A id=References name=References></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: References" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=25">edit</A>]</SPAN> 
<SPAN class=mw-headline>References</SPAN></H2>
<UL>
  <LI>Axt, P. (1959) On a Subrecursive Hierarchy and Primitive Recursive 
  Degrees, <I>Transactions of the American Mathematical Society</I> 92, pp. 
  85-105 
  <LI><CITE id=CITEREFBlassGurevich2003 style="FONT-STYLE: normal"><A 
  title="Andreas Blass" href="http://en.wikipedia.org/wiki/Andreas_Blass">Blass, 
  Andreas</A> &amp; <A title="Yuri Gurevich" 
  href="http://en.wikipedia.org/wiki/Yuri_Gurevich">Gurevich, Yuri</A> (2003), 
  "<A class="external text" 
  title=http://research.microsoft.com/~gurevich/Opera/164.pdf 
  href="http://research.microsoft.com/~gurevich/Opera/164.pdf" 
  rel=nofollow>Algorithms: A Quest for Absolute Definitions</A>", <I>Bulletin of 
  European Association for Theoretical Computer Science</I> <B>81</B><SPAN 
  class=printonly>, &lt;<A class="external free" 
  title=http://research.microsoft.com/~gurevich/Opera/164.pdf 
  href="http://research.microsoft.com/~gurevich/Opera/164.pdf" 
  rel=nofollow>http://research.microsoft.com/~gurevich/Opera/164.pdf</A>&gt;</SPAN></CITE><SPAN 
  class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Algorithms%3A+A+Quest+for+Absolute+Definitions&amp;rft.jtitle=Bulletin+of+European+Association+for+Theoretical+Computer+Science&amp;rft.aulast=Blass&amp;rft.aufirst=Andreas&amp;rft.au=Blass%2C+Andreas&amp;rft.au=Gurevich%2C+Yuri&amp;rft.date=2003&amp;rft.volume=81&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2F%7Egurevich%2FOpera%2F164.pdf&amp;rfr_id=info:sid/en.wikipedia.org:Algorithm><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN>. Includes an excellent bibliography 
  of 56 references. 
  <LI><CITE id=CITEREFBoolosJeffrey1974.2C_1999 style="FONT-STYLE: normal"><A 
  title="George Boolos" 
  href="http://en.wikipedia.org/wiki/George_Boolos">Boolos, George</A> &amp; <A 
  title="Richard Jeffrey" 
  href="http://en.wikipedia.org/wiki/Richard_Jeffrey">Jeffrey, Richard</A> 
  (1974, 1980, 1989, 1999), <I>Computability and Logic</I> (4th ed.), Cambridge 
  University Press, London, <A class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/052120402X">ISBN 
  0-521-20402-X</A></CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Computability+and+Logic&amp;rft.aulast=Boolos&amp;rft.aufirst=George&amp;rft.au=Boolos%2C+George&amp;rft.au=Jeffrey%2C+Richard&amp;rft.date=1974%2C+1980%2C+1989%2C+1999&amp;rft.edition=4th&amp;rft.pub=Cambridge+University+Press%2C+London&amp;rft.isbn=0-521-20402-X&amp;rfr_id=info:sid/en.wikipedia.org:Algorithm><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN>: cf. Chapter 3 <I>Turing 
  machines</I> where they discuss "certain enumerable sets not effectively 
  (mechanically) enumerable". 
  <LI>Burgin, M. <I>Super-recursive algorithms</I>, Monographs in computer 
  science, Springer, 2005. <A class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/0387955690">ISBN 
  0387955690</A> 
  <LI>Campagnolo, M.L., Moore, C., and Costa, J.F. (2000) An analog 
  characterization of the subrecursive functions. In <I>Proc. of the 4th 
  Conference on Real Numbers and Computers</I>, Odense University, pp. 91-109 
  <LI><CITE style="FONT-STYLE: normal"><A title="Alonzo Church" 
  href="http://en.wikipedia.org/wiki/Alonzo_Church">Church, Alonzo</A> (1936a). 
  "An Unsolvable Problem of Elementary Number Theory". <I>The American Journal 
  of Mathematics</I> <B>58</B>: 345–363. <A title="Digital object identifier" 
  href="http://en.wikipedia.org/wiki/Digital_object_identifier">doi</A>:<SPAN 
  class=neverexpand><A class="external text" 
  title=http://dx.doi.org/10.2307%2F2371045 
  href="http://dx.doi.org/10.2307%2F2371045" 
  rel=nofollow>10.2307/2371045</A></SPAN>.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=An+Unsolvable+Problem+of+Elementary+Number+Theory&amp;rft.jtitle=The+American+Journal+of+Mathematics&amp;rft.date=1936a&amp;rft.volume=58&amp;rft.aulast=Church&amp;rft.aufirst=Alonzo&amp;rft.pages=345%E2%80%93363&amp;rft_id=info:doi/10.2307%2F2371045><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> Reprinted in <I>The 
  Undecidable</I>, p. 89ff. The first expression of "Church's Thesis". See in 
  particular page 100 (<I>The Undecidable</I>) where he defines the notion of 
  "effective calculability" in terms of "an algorithm", and he uses the word 
  "terminates", etc. 
  <LI><CITE style="FONT-STYLE: normal"><A title="Alonzo Church" 
  href="http://en.wikipedia.org/wiki/Alonzo_Church">Church, Alonzo</A> (1936b). 
  "A Note on the Entscheidungsproblem". <I>Journal of Symbolic Logic</I> <B>1 
  no. 1 and volume 1 no. 3</B>.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=A+Note+on+the+Entscheidungsproblem&amp;rft.jtitle=Journal+of+Symbolic+Logic&amp;rft.date=1936b&amp;rft.volume=1+no.+1+and+volume+1+no.+3&amp;rft.aulast=Church&amp;rft.aufirst=Alonzo><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> Reprinted in <I>The 
  Undecidable</I>, p. 110ff. Church shows that the Entscheidungsproblem is 
  unsolvable in about 3 pages of text and 3 pages of footnotes. 
  <LI><CITE class=book id=Reference-Daffa.27-1977 
  style="FONT-STYLE: normal">Daffa', Ali Abdullah al- (1977). <I>The Muslim 
  contribution to mathematics</I>. London: Croom Helm. <A class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/0856644641">ISBN 
  0-85664-464-1</A>.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Muslim+contribution+to+mathematics&amp;rft.aulast=Daffa%27&amp;rft.aufirst=Ali+Abdullah+al-&amp;rft.date=1977&amp;rft.pub=Croom+Helm&amp;rft.place=London&amp;rft.isbn=0-85664-464-1><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> 
  <LI><CITE class=book id=Reference-Davis-1965 style="FONT-STYLE: normal"><A 
  title="Martin Davis" href="http://en.wikipedia.org/wiki/Martin_Davis">Davis, 
  Martin</A> (1965). <I>The Undecidable: Basic Papers On Undecidable 
  Propostions, Unsolvable Problems and Computable Functions</I>. New York: Raven 
  Press.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Undecidable%3A+Basic+Papers+On+Undecidable+Propostions%2C+Unsolvable+Problems+and+Computable+Functions&amp;rft.aulast=Davis&amp;rft.aufirst=Martin&amp;rft.date=1965&amp;rft.pub=Raven+Press&amp;rft.place=New+York><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> Davis gives commentary before each 
  article. Papers of <A class=mw-redirect title=Gödel 
  href="http://en.wikipedia.org/wiki/G%C3%B6del">Gödel</A>, <A 
  title="Alonzo Church" href="http://en.wikipedia.org/wiki/Alonzo_Church">Alonzo 
  Church</A>, <A title="Alan Turing" 
  href="http://en.wikipedia.org/wiki/Alan_Turing">Turing</A>, <A 
  title="J. Barkley Rosser" 
  href="http://en.wikipedia.org/wiki/J._Barkley_Rosser">Rosser</A>, <A 
  class=mw-redirect title=Kleene 
  href="http://en.wikipedia.org/wiki/Kleene">Kleene</A>, and <A 
  class=mw-redirect title="Emil Post" 
  href="http://en.wikipedia.org/wiki/Emil_Post">Emil Post</A> are included; 
  those cited in the article are listed here by author's name. 
  <LI><CITE class=book id=Reference-Davis-2000 style="FONT-STYLE: normal"><A 
  title="Martin Davis" href="http://en.wikipedia.org/wiki/Martin_Davis">Davis, 
  Martin</A> (2000). <I>Engines of Logic: Mathematicians and the Origin of the 
  Computer</I>. New York: W. W. Nortion.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Engines+of+Logic%3A+Mathematicians+and+the+Origin+of+the+Computer&amp;rft.aulast=Davis&amp;rft.aufirst=Martin&amp;rft.date=2000&amp;rft.pub=W.+W.+Nortion&amp;rft.place=New+York><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> Davis offers concise biographies of 
  <A class=mw-redirect title=Leibniz 
  href="http://en.wikipedia.org/wiki/Leibniz">Leibniz</A>, <A class=mw-redirect 
  title=Boole href="http://en.wikipedia.org/wiki/Boole">Boole</A>, <A 
  class=mw-redirect title=Frege 
  href="http://en.wikipedia.org/wiki/Frege">Frege</A>, <A title="Georg Cantor" 
  href="http://en.wikipedia.org/wiki/Georg_Cantor">Cantor</A>, <A 
  class=mw-redirect title=Hilbert 
  href="http://en.wikipedia.org/wiki/Hilbert">Hilbert</A>, <A class=mw-redirect 
  title=Gödel href="http://en.wikipedia.org/wiki/G%C3%B6del">Gödel</A> and <A 
  title="Alan Turing" href="http://en.wikipedia.org/wiki/Alan_Turing">Turing</A> 
  with <A class=mw-redirect title="Von Neumann" 
  href="http://en.wikipedia.org/wiki/Von_Neumann">von Neumann</A> as the 
  show-stealing villain. Very brief bios of <A class=mw-redirect 
  title="Joseph-Marie Jacquard" 
  href="http://en.wikipedia.org/wiki/Joseph-Marie_Jacquard">Joseph-Marie 
  Jacquard</A>, <A class=mw-redirect title=Babbage 
  href="http://en.wikipedia.org/wiki/Babbage">Babbage</A>, <A 
  title="Ada Lovelace" href="http://en.wikipedia.org/wiki/Ada_Lovelace">Ada 
  Lovelace</A>, <A title="Claude Shannon" 
  href="http://en.wikipedia.org/wiki/Claude_Shannon">Claude Shannon</A>, <A 
  class=mw-redirect title="Howard Aiken" 
  href="http://en.wikipedia.org/wiki/Howard_Aiken">Howard Aiken</A>, etc. 
  <LI>Paul E. Black, <A class="external text" 
  title=http://www.nist.gov/dads/HTML/algorithm.html 
  href="http://www.nist.gov/dads/HTML/algorithm.html" rel=nofollow>algorithm</A> 
  at the <A title="National Institute of Standards and Technology" 
  href="http://en.wikipedia.org/wiki/National_Institute_of_Standards_and_Technology">NIST</A> 
  <A title="Dictionary of Algorithms and Data Structures" 
  href="http://en.wikipedia.org/wiki/Dictionary_of_Algorithms_and_Data_Structures">Dictionary 
  of Algorithms and Data Structures</A>. 
  <LI><CITE class=book id=Reference-Dennett-1995 style="FONT-STYLE: normal"><A 
  title="Daniel Dennett" 
  href="http://en.wikipedia.org/wiki/Daniel_Dennett">Dennett, Daniel</A> (1995). 
  <I>Darwin's Dangerous Idea</I>. New York: Touchstone/Simon &amp; 
  Schuster.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Darwin%27s+Dangerous+Idea&amp;rft.aulast=Dennett&amp;rft.aufirst=Daniel&amp;rft.date=1995&amp;rft.pub=Touchstone%2FSimon+%26+Schuster&amp;rft.place=New+York><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> 
  <LI><A title="Yuri Gurevich" 
  href="http://en.wikipedia.org/wiki/Yuri_Gurevich">Yuri Gurevich</A>, <A 
  class="external text" 
  title=http://research.microsoft.com/~gurevich/Opera/141.pdf 
  href="http://research.microsoft.com/~gurevich/Opera/141.pdf" 
  rel=nofollow><I>Sequential Abstract State Machines Capture Sequential 
  Algorithms</I></A>, ACM Transactions on Computational Logic, Vol 1, no 1 (July 
  2000), pages 77–111. Includes bibliography of 33 sources. 
  <LI><CITE style="FONT-STYLE: normal"><A class=mw-redirect 
  title="Stephen Kleene" 
  href="http://en.wikipedia.org/wiki/Stephen_Kleene">Kleene C., Stephen</A> 
  (1936). "General Recursive Functions of Natural Numbers". <I>Mathematische 
  Annalen</I> <B>Band 112, Heft 5</B>: 727–742. <A 
  title="Digital object identifier" 
  href="http://en.wikipedia.org/wiki/Digital_object_identifier">doi</A>:<SPAN 
  class=neverexpand><A class="external text" 
  title=http://dx.doi.org/10.1007%2FBF01565439 
  href="http://dx.doi.org/10.1007%2FBF01565439" 
  rel=nofollow>10.1007/BF01565439</A></SPAN>.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=General+Recursive+Functions+of+Natural+Numbers&amp;rft.jtitle=Mathematische+Annalen&amp;rft.date=1936&amp;rft.volume=Band+112%2C+Heft+5&amp;rft.aulast=Kleene+C.&amp;rft.aufirst=Stephen&amp;rft.pages=727%E2%80%93742&amp;rft_id=info:doi/10.1007%2FBF01565439><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> Presented to the American 
  Mathematical Society, September 1935. Reprinted in <I>The Undecidable</I>, p. 
  237ff. Kleene's definition of "general recursion" (known now as mu-recursion) 
  was used by Church in his 1935 paper <I>An Unsolvable Problem of Elementary 
  Number Theory</I> that proved the "decision problem" to be "undecidable" 
  (i.e., a negative result). 
  <LI><CITE style="FONT-STYLE: normal"><A class=mw-redirect 
  title="Stephen Kleene" 
  href="http://en.wikipedia.org/wiki/Stephen_Kleene">Kleene C., Stephen</A> 
  (1943). "Recursive Predicates and Quantifiers". <I>American Mathematical 
  Society Transactions</I> <B>Volume 54, No. 1</B>: 41–73. <A 
  title="Digital object identifier" 
  href="http://en.wikipedia.org/wiki/Digital_object_identifier">doi</A>:<SPAN 
  class=neverexpand><A class="external text" 
  title=http://dx.doi.org/10.2307%2F1990131 
  href="http://dx.doi.org/10.2307%2F1990131" 
  rel=nofollow>10.2307/1990131</A></SPAN>.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Recursive+Predicates+and+Quantifiers&amp;rft.jtitle=American+Mathematical+Society+Transactions&amp;rft.date=1943&amp;rft.volume=Volume+54%2C+No.+1&amp;rft.aulast=Kleene+C.&amp;rft.aufirst=Stephen&amp;rft.pages=41%E2%80%9373&amp;rft_id=info:doi/10.2307%2F1990131><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> Reprinted in <I>The 
  Undecidable</I>, p. 255ff. Kleene refined his definition of "general 
  recursion" and proceeded in his chapter "12. Algorithmic theories" to posit 
  "Thesis I" (p. 274); he would later repeat this thesis (in Kleene 1952:300) 
  and name it "Church's Thesis"(Kleene 1952:317) (i.e., the <A class=new 
  title="Church Thesis (page does not exist)" 
  href="http://en.wikipedia.org/w/index.php?title=Church_Thesis&amp;action=edit&amp;redlink=1">Church 
  Thesis</A>). 
  <LI><CITE class=book id=Reference-Kleene-First_Edition_1952 
  style="FONT-STYLE: normal"><A class=mw-redirect title=Kleene 
  href="http://en.wikipedia.org/wiki/Kleene">Kleene, Stephen C.</A> (First 
  Edition 1952). <I>Introduction to Metamathematics</I>, Tenth Edition 1991, 
  North-Holland Publishing Company.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Introduction+to+Metamathematics&amp;rft.aulast=Kleene&amp;rft.aufirst=Stephen+C.&amp;rft.date=First+Edition+1952&amp;rft.edition=Tenth+Edition+1991&amp;rft.pub=North-Holland+Publishing+Company><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> Excellent — accessible, readable — 
  reference source for mathematical "foundations". 
  <LI><CITE class=book id=Reference-Knuth-1997 style="FONT-STYLE: normal"><A 
  title="Donald Knuth" href="http://en.wikipedia.org/wiki/Donald_Knuth">Knuth, 
  Donald</A> (1997). <I>Fundamental Algorithms, Third Edition</I>. Reading, 
  Massachusetts: Addison-Wesley. <A class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/0201896834">ISBN 
  0201896834</A>.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Fundamental+Algorithms%2C+Third+Edition&amp;rft.aulast=Knuth&amp;rft.aufirst=Donald&amp;rft.date=1997&amp;rft.pub=Addison-Wesley&amp;rft.place=Reading%2C+Massachusetts&amp;rft.isbn=0201896834><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> 
  <LI>Kosovsky, N. K. <I>Elements of Mathematical Logic and its Application to 
  the theory of Subrecursive Algorithms</I>, LSU Publ., Leningrad, 1981 
  <LI><CITE style="FONT-STYLE: normal"><A title="Robert Kowalski" 
  href="http://en.wikipedia.org/wiki/Robert_Kowalski">Kowalski, Robert</A> 
  (1979). "Algorithm=Logic+Control". <I>Communications of the ACM</I> <B>22</B> 
  (7): 424–436. ACM Press. <A title="Digital object identifier" 
  href="http://en.wikipedia.org/wiki/Digital_object_identifier">doi</A>:<SPAN 
  class=neverexpand><A class="external text" 
  title=http://dx.doi.org/10.1145%2F359131.359136 
  href="http://dx.doi.org/10.1145%2F359131.359136" 
  rel=nofollow>10.1145/359131.359136</A></SPAN>. ISSN 0001-0782.</CITE><SPAN 
  class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Algorithm%3DLogic%2BControl&amp;rft.jtitle=Communications+of+the+ACM&amp;rft.date=1979&amp;rft.volume=22&amp;rft.issue=7&amp;rft.aulast=Kowalski&amp;rft.aufirst=Robert&amp;rft.pages=424%E2%80%93436&amp;rft_id=info:doi/10.1145%2F359131.359136><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> 
  <LI><A class=mw-redirect title="A. A. Markov" 
  href="http://en.wikipedia.org/wiki/A._A._Markov">A. A. Markov</A> (1954) 
  <I>Theory of algorithms</I>. [Translated by Jacques J. Schorr-Kon and PST 
  staff] Imprint Moscow, Academy of Sciences of the USSR, 1954 [i.e., Jerusalem, 
  Israel Program for Scientific Translations, 1961; available from the Office of 
  Technical Services, U.S. Dept. of Commerce, Washington] Description 444 p. 28 
  cm. Added t.p. in Russian Translation of Works of the Mathematical Institute, 
  Academy of Sciences of the USSR, v. 42. Original title: Teoriya algerifmov. 
  [QA248.M2943 Dartmouth College library. U.S. Dept. of Commerce, Office of 
  Technical Services, number OTS 60-51085.] 
  <LI><CITE class=book id=Reference-Minsky-1967 style="FONT-STYLE: normal"><A 
  title="Marvin Minsky" 
  href="http://en.wikipedia.org/wiki/Marvin_Minsky">Minsky, Marvin</A> (1967). 
  <I>Computation: Finite and Infinite Machines</I>, First, Prentice-Hall, 
  Englewood Cliffs, NJ.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Computation%3A+Finite+and+Infinite+Machines&amp;rft.aulast=Minsky&amp;rft.aufirst=Marvin&amp;rft.date=1967&amp;rft.edition=First&amp;rft.pub=Prentice-Hall%2C+Englewood+Cliffs%2C+NJ><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> Minsky expands his "...idea of an 
  algorithm — an effective procedure..." in chapter 5.1 <I>Computability, 
  Effective Procedues and Algorithms. Infinite machines."</I> 
  <LI><CITE style="FONT-STYLE: normal"><A class=mw-redirect title="Emil Post" 
  href="http://en.wikipedia.org/wiki/Emil_Post">Post, Emil</A> (1936). "Finite 
  Combinatory Processes, Formulation I". <I>The Journal of Symbolic Logic</I> 
  <B>1</B>: pp.103–105. <A title="Digital object identifier" 
  href="http://en.wikipedia.org/wiki/Digital_object_identifier">doi</A>:<SPAN 
  class=neverexpand><A class="external text" 
  title=http://dx.doi.org/10.2307%2F2269031 
  href="http://dx.doi.org/10.2307%2F2269031" 
  rel=nofollow>10.2307/2269031</A></SPAN>.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Finite+Combinatory+Processes%2C+Formulation+I&amp;rft.jtitle=The+Journal+of+Symbolic+Logic&amp;rft.date=1936&amp;rft.volume=1&amp;rft.aulast=Post&amp;rft.aufirst=Emil&amp;rft.pages=pp.103%E2%80%93105&amp;rft_id=info:doi/10.2307%2F2269031><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> Reprinted in <I>The 
  Undecidable</I>, p. 289ff. Post defines a simple algorithmic-like process of a 
  man writing marks or erasing marks and going from box to box and eventually 
  halting, as he follows a list of simple instructions. This is cited by Kleene 
  as one source of his "Thesis I", the so-called <A class=mw-redirect 
  title="Church-Turing thesis" 
  href="http://en.wikipedia.org/wiki/Church-Turing_thesis">Church-Turing 
  thesis</A>. 
  <LI><CITE style="FONT-STYLE: normal"><A class=mw-redirect title="J.B. Rosser" 
  href="http://en.wikipedia.org/wiki/J.B._Rosser">Rosser, J.B.</A> (1939). "An 
  Informal Exposition of Proofs of Godel's Theorem and Church's Theorem". 
  <I>Journal of Symbolic Logic</I> <B>4</B>.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=An+Informal+Exposition+of+Proofs+of+Godel%27s+Theorem+and+Church%27s+Theorem&amp;rft.jtitle=Journal+of+Symbolic+Logic&amp;rft.date=1939&amp;rft.volume=4&amp;rft.aulast=Rosser&amp;rft.aufirst=J.B.><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> Reprinted in <I>The 
  Undecidable</I>, p. 223ff. Herein is Rosser's famous definition of "effective 
  method": "...a method each step of which is precisely predetermined and which 
  is certain to produce the answer in a finite number of steps... a machine 
  which will then solve any problem of the set with no human intervention beyond 
  inserting the question and (later) reading the answer" (p. 225–226, <I>The 
  Undecidable</I>) 
  <LI><CITE class=book id=Reference-Sipser-2006 
  style="FONT-STYLE: normal">Sipser, Michael (2006). <I>Introduction to the 
  Theory of Computation</I>. PWS Publishing Company.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Introduction+to+the+Theory+of+Computation&amp;rft.aulast=Sipser&amp;rft.aufirst=Michael&amp;rft.date=2006&amp;rft.pub=PWS+Publishing+Company><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> 
  <LI><CITE class=book style="FONT-STYLE: normal">Stone, Harold S.. 
  <I>Introduction to Computer Organization and Data Structures</I>, 1972, 
  McGraw-Hill, New York.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Introduction+to+Computer+Organization+and+Data+Structures&amp;rft.aulast=Stone&amp;rft.aufirst=Harold+S.&amp;rft.edition=1972&amp;rft.pub=McGraw-Hill%2C+New+York><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> Cf in particular the first chapter 
  titled: <I>Algorithms, Turing Machines, and Programs</I>. His succinct 
  informal definition: "...any sequence of instructions that can be obeyed by a 
  robot, is called an <I>algorithm</I>" (p. 4). 
  <LI><CITE style="FONT-STYLE: normal"><A class=mw-redirect title="A. M. Turing" 
  href="http://en.wikipedia.org/wiki/A._M._Turing">Turing, Alan M.</A> (1936-7). 
  "On Computable Numbers, With An Application to the Entscheidungsproblem". 
  <I>Proceedings of the London Mathematical Society</I> <B>series 2, volume 
  42</B>: 230–265. <A title="Digital object identifier" 
  href="http://en.wikipedia.org/wiki/Digital_object_identifier">doi</A>:<SPAN 
  class=neverexpand><A class="external text" 
  title=http://dx.doi.org/10.1112%2Fplms%2Fs2-42.1.230 
  href="http://dx.doi.org/10.1112%2Fplms%2Fs2-42.1.230" 
  rel=nofollow>10.1112/plms/s2-42.1.230</A></SPAN>.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=On+Computable+Numbers%2C+With+An+Application+to+the+Entscheidungsproblem&amp;rft.jtitle=Proceedings+of+the+London+Mathematical+Society&amp;rft.date=1936-7&amp;rft.volume=series+2%2C+volume+42&amp;rft.aulast=Turing&amp;rft.aufirst=Alan+M.&amp;rft.pages=230%E2%80%93265&amp;rft_id=info:doi/10.1112%2Fplms%2Fs2-42.1.230><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN>. Corrections, ibid, vol. 43(1937) 
  pp.544-546. Reprinted in <I>The Undecidable</I>, p. 116ff. Turing's famous 
  paper completed as a Master's dissertation while at King's College Cambridge 
  UK. 
  <LI><CITE style="FONT-STYLE: normal"><A class=mw-redirect title="A. M. Turing" 
  href="http://en.wikipedia.org/wiki/A._M._Turing">Turing, Alan M.</A> (1939). 
  "Systems of Logic Based on Ordinals". <I>Proceedings of the London 
  Mathematical Society</I> <B>series 2, volume 45</B>: 161–228. <A 
  title="Digital object identifier" 
  href="http://en.wikipedia.org/wiki/Digital_object_identifier">doi</A>:<SPAN 
  class=neverexpand><A class="external text" 
  title=http://dx.doi.org/10.1112%2Fplms%2Fs2-45.1.161 
  href="http://dx.doi.org/10.1112%2Fplms%2Fs2-45.1.161" 
  rel=nofollow>10.1112/plms/s2-45.1.161</A></SPAN>.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.atitle=Systems+of+Logic+Based+on+Ordinals&amp;rft.jtitle=Proceedings+of+the+London+Mathematical+Society&amp;rft.date=1939&amp;rft.volume=series+2%2C+volume+45&amp;rft.aulast=Turing&amp;rft.aufirst=Alan+M.&amp;rft.pages=161%E2%80%93228&amp;rft_id=info:doi/10.1112%2Fplms%2Fs2-45.1.161><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN> Reprinted in <I>The 
  Undecidable</I>, p. 155ff. Turing's paper that defined "the oracle" was his 
  PhD thesis while at Princeton USA. 
  <LI><A title="United States Patent and Trademark Office" 
  href="http://en.wikipedia.org/wiki/United_States_Patent_and_Trademark_Office">United 
  States Patent and Trademark Office</A> (2006), <A class="external text" 
  title=http://www.uspto.gov/web/offices/pac/mpep/documents/2100_2106_02.htm 
  href="http://www.uspto.gov/web/offices/pac/mpep/documents/2100_2106_02.htm" 
  rel=nofollow><I>2106.02 **&gt;Mathematical Algorithms&lt; - 2100 
  Patentability</I></A>, Manual of Patent Examining Procedure (MPEP). Latest 
  revision August 2006 </LI></UL>
<P><A id=Secondary_references name=Secondary_references></A></P>
<H3><SPAN class=editsection>[<A title="Edit section: Secondary references" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=26">edit</A>]</SPAN> 
<SPAN class=mw-headline>Secondary references</SPAN></H3>
<UL>
  <LI><CITE class=book style="FONT-STYLE: normal"><A title=Bolter 
  href="http://en.wikipedia.org/wiki/Bolter">Bolter, David J.</A>. <I>Turing's 
  Man: Western Culture in the Computer Age</I>, (1984), The University of North 
  Carolina Press, Chapel Hill NC.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Turing%27s+Man%3A+Western+Culture+in+the+Computer+Age&amp;rft.aulast=Bolter&amp;rft.aufirst=David+J.&amp;rft.edition=%281984%29&amp;rft.pub=The+University+of+North+Carolina+Press%2C+Chapel+Hill+NC><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN>, <A class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/0807841080">ISBN 
  0-8078-4108-0</A> pbk. 
  <LI><CITE class=book style="FONT-STYLE: normal"><A class=new 
  title="Dilson (page does not exist)" 
  href="http://en.wikipedia.org/w/index.php?title=Dilson&amp;action=edit&amp;redlink=1">Dilson, 
  Jesse</A>. <I>The Abacus</I>, (1968,1994), St. Martin's Press, NY.</CITE><SPAN 
  class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Abacus&amp;rft.aulast=Dilson&amp;rft.aufirst=Jesse&amp;rft.edition=%281968%2C1994%29&amp;rft.pub=St.+Martin%27s+Press%2C+NY><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN>, <A class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/031210409X">ISBN 
  0-312-10409-X</A> (pbk.) 
  <LI><CITE class=book style="FONT-STYLE: normal"><A class=new 
  title="Van Heijenoort (page does not exist)" 
  href="http://en.wikipedia.org/w/index.php?title=Van_Heijenoort&amp;action=edit&amp;redlink=1">van 
  Heijenoort, Jean</A>. <I>From Frege to Gödel, A Source Book in Mathematical 
  Logic, 1879–1931</I>, (1967), Harvard University Press, Cambridge, 
  MA.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=From+Frege+to+G%C3%B6del%2C+A+Source+Book+in+Mathematical+Logic%2C+1879%E2%80%931931&amp;rft.aulast=van+Heijenoort&amp;rft.aufirst=Jean&amp;rft.edition=%281967%29&amp;rft.pub=Harvard+University+Press%2C+Cambridge%2C+MA><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN>, 3rd edition 1976[?], <A 
  class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/0674324498">ISBN 
  0-674-32449-8</A> (pbk.) 
  <LI><CITE class=book style="FONT-STYLE: normal"><A title=Hodges 
  href="http://en.wikipedia.org/wiki/Hodges">Hodges, Andrew</A>. <I>Alan Turing: 
  The Enigma</I>, (1983), Simon and Schuster, New York.</CITE><SPAN class=Z3988 
  title=ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Alan+Turing%3A+The+Enigma&amp;rft.aulast=Hodges&amp;rft.aufirst=Andrew&amp;rft.edition=%281983%29&amp;rft.pub=Simon+and+Schuster%2C+New+York><SPAN 
  style="DISPLAY: none">&nbsp;</SPAN></SPAN>, <A class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/0671492071">ISBN 
  0-671-49207-1</A>. Cf Chapter "The Spirit of Truth" for a history leading to, 
  and a discussion of, his proof. </LI></UL>
<P><A id=External_links name=External_links></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: External links" 
href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit&amp;section=27">edit</A>]</SPAN> 
<SPAN class=mw-headline>External links</SPAN></H2>
<UL>
  <LI><CITE id=Reference-Mathworld-Algorithm><A title="Eric W. Weisstein" 
  href="http://en.wikipedia.org/wiki/Eric_W._Weisstein">Eric W. Weisstein</A>, 
  <I><A class="external text" title=http://mathworld.wolfram.com/Algorithm.html 
  href="http://mathworld.wolfram.com/Algorithm.html" 
  rel=nofollow>Algorithm</A></I> at <A title=MathWorld 
  href="http://en.wikipedia.org/wiki/MathWorld">MathWorld</A>.</CITE> 
  <LI><A class="external text" 
  title=http://everydaymath.uchicago.edu/educators/Algorithms_final.pdf 
  href="http://everydaymath.uchicago.edu/educators/Algorithms_final.pdf" 
  rel=nofollow>Algorithms in Everyday Mathematics</A> 
  <LI><A class="external text" title=http://www.dmoz.org/Computers/Algorithms// 
  href="http://www.dmoz.org/Computers/Algorithms//" rel=nofollow>Algorithms</A> 
  at the <A title="Open Directory Project" 
  href="http://en.wikipedia.org/wiki/Open_Directory_Project">Open Directory 
  Project</A> 
  <LI><A class="external text" title=http://sortieralgorithmen.de/ 
  href="http://sortieralgorithmen.de/" rel=nofollow>Sortier- und Suchalgorithmen 
  (German)</A> </LI></UL>
<P><SPAN id=interwiki-sr-fa></SPAN></P><!-- 
NewPP limit report
Preprocessor node count: 5364/1000000
Post-expand include size: 40548/2048000 bytes
Template argument size: 12342/2048000 bytes
Expensive parser function count: 0/500
--><!-- Saved in parser cache with key enwiki:pcache:idhash:775-0!1!0!default!!en!2 and timestamp 20081023124256 -->
<DIV class=printfooter>Retrieved from "<A 
href="http://en.wikipedia.org/wiki/Algorithm">http://en.wikipedia.org/wiki/Algorithm</A>"</DIV>
<DIV class=catlinks id=catlinks>
<DIV id=mw-normal-catlinks><A title=Special:Categories 
href="http://en.wikipedia.org/wiki/Special:Categories">Categories</A>: <SPAN 
dir=ltr><A title=Category:Algorithms 
href="http://en.wikipedia.org/wiki/Category:Algorithms">Algorithms</A></SPAN> | 
<SPAN dir=ltr><A title="Category:Arabic words and phrases" 
href="http://en.wikipedia.org/wiki/Category:Arabic_words_and_phrases">Arabic 
words and phrases</A></SPAN> | <SPAN dir=ltr><A 
title="Category:Discrete mathematics" 
href="http://en.wikipedia.org/wiki/Category:Discrete_mathematics">Discrete 
mathematics</A></SPAN> | <SPAN dir=ltr><A title="Category:Mathematical logic" 
href="http://en.wikipedia.org/wiki/Category:Mathematical_logic">Mathematical 
logic</A></SPAN> | <SPAN dir=ltr><A 
title="Category:Theoretical computer science" 
href="http://en.wikipedia.org/wiki/Category:Theoretical_computer_science">Theoretical 
computer science</A></SPAN> | <SPAN dir=ltr><A 
title="Category:Articles with example pseudocode" 
href="http://en.wikipedia.org/wiki/Category:Articles_with_example_pseudocode">Articles 
with example pseudocode</A></SPAN></DIV>
<DIV class=mw-hidden-cats-hidden id=mw-hidden-catlinks>Hidden category: <SPAN 
dir=ltr><A 
title="Category:Wikipedia articles incorporating text from public domain works of the United States Government" 
href="http://en.wikipedia.org/wiki/Category:Wikipedia_articles_incorporating_text_from_public_domain_works_of_the_United_States_Government">Wikipedia 
articles incorporating text from public domain works of the United States 
Government</A></SPAN></DIV></DIV><!-- end content -->
<DIV class=visualClear></DIV></DIV></DIV></DIV>
<DIV id=column-one>
<DIV class=portlet id=p-cactions>
<H5>Views</H5>
<DIV class=pBody>
<UL>
  <LI class=selected id=ca-nstab-main><A title="View the content page [c]" 
  accessKey=c href="http://en.wikipedia.org/wiki/Algorithm">Article</A> 
  <LI id=ca-talk><A title="Discussion about the content page [t]" accessKey=t 
  href="http://en.wikipedia.org/wiki/Talk:Algorithm">Discussion</A> 
  <LI id=ca-edit><A 
  title="You can edit this page. &#10;Please use the preview button before saving. [e]" 
  accessKey=e 
  href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=edit">Edit 
  this page</A> 
  <LI id=ca-history><A title="Past versions of this page [h]" accessKey=h 
  href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;action=history">History</A> 
  </LI></UL></DIV></DIV>
<DIV class=portlet id=p-personal>
<H5>Personal tools</H5>
<DIV class=pBody>
<UL>
  <LI id=pt-login><A 
  title="You are encouraged to log in; however, it is not mandatory. [o]" 
  accessKey=o 
  href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Algorithm">Log 
  in / create account</A> </LI></UL></DIV></DIV>
<DIV class=portlet id=p-logo><A title="Visit the main page [z]" 
style="BACKGROUND-IMAGE: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png)" 
accessKey=z href="http://en.wikipedia.org/wiki/Main_Page"></A></DIV>
<SCRIPT type=text/javascript> if (window.isMSIE55) fixalpha(); </SCRIPT>

<DIV class="generated-sidebar portlet" id=p-navigation>
<H5>Navigation</H5>
<DIV class=pBody>
<UL>
  <LI id=n-mainpage-description><A title="Visit the main page [z]" accessKey=z 
  href="http://en.wikipedia.org/wiki/Main_Page">Main page</A> 
  <LI id=n-contents><A title="Guides to browsing Wikipedia" 
  href="http://en.wikipedia.org/wiki/Portal:Contents">Contents</A> 
  <LI id=n-featuredcontent><A title="Featured content — the best of Wikipedia" 
  href="http://en.wikipedia.org/wiki/Portal:Featured_content">Featured 
  content</A> 
  <LI id=n-currentevents><A 
  title="Find background information on current events" 
  href="http://en.wikipedia.org/wiki/Portal:Current_events">Current events</A> 
  <LI id=n-randompage><A title="Load a random article [x]" accessKey=x 
  href="http://en.wikipedia.org/wiki/Special:Random">Random article</A> 
</LI></UL></DIV></DIV>
<DIV class=portlet id=p-search>
<H5><LABEL for=searchInput>Search</LABEL></H5>
<DIV class=pBody id=searchBody>
<FORM id=searchform action=/wiki/Special:Search>
<DIV><INPUT id=searchInput title="Search Wikipedia [f]" accessKey=f name=search> 
<INPUT class=searchButton id=searchGoButton title="Go to a page with this exact name if one exists" type=submit value=Go name=go>&nbsp; 
<INPUT class=searchButton id=mw-searchButton title="Search Wikipedia for this text" type=submit value=Search name=fulltext> 
</DIV></FORM></DIV></DIV>
<DIV class="generated-sidebar portlet" id=p-interaction>
<H5>Interaction</H5>
<DIV class=pBody>
<UL>
  <LI id=n-aboutsite><A title="Find out about Wikipedia" 
  href="http://en.wikipedia.org/wiki/Wikipedia:About">About Wikipedia</A> 
  <LI id=n-portal><A 
  title="About the project, what you can do, where to find things" 
  href="http://en.wikipedia.org/wiki/Wikipedia:Community_portal">Community 
  portal</A> 
  <LI id=n-recentchanges><A title="The list of recent changes in the wiki [r]" 
  accessKey=r href="http://en.wikipedia.org/wiki/Special:RecentChanges">Recent 
  changes</A> 
  <LI id=n-contact><A title="How to contact Wikipedia" 
  href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</A> 

  <LI id=n-sitesupport><A title="Support us" 
  href="http://wikimediafoundation.org/wiki/Donate">Donate to Wikipedia</A> 
  <LI id=n-help><A title="Guidance on how to use and edit Wikipedia" 
  href="http://en.wikipedia.org/wiki/Help:Contents">Help</A> 
</LI></UL></DIV></DIV>
<DIV class=portlet id=p-tb>
<H5>Toolbox</H5>
<DIV class=pBody>
<UL>
  <LI id=t-whatlinkshere><A 
  title="List of all English Wikipedia pages containing links to this page [j]" 
  accessKey=j 
  href="http://en.wikipedia.org/wiki/Special:WhatLinksHere/Algorithm">What links 
  here</A> 
  <LI id=t-recentchangeslinked><A 
  title="Recent changes in pages linked from this page [k]" accessKey=k 
  href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/Algorithm">Related 
  changes</A> 
  <LI id=t-upload><A title="Upload files [u]" accessKey=u 
  href="http://en.wikipedia.org/wiki/Wikipedia:Upload">Upload file</A> 
  <LI id=t-specialpages><A title="List of all special pages [q]" accessKey=q 
  href="http://en.wikipedia.org/wiki/Special:SpecialPages">Special pages</A> 
  <LI id=t-print><A title="Printable version of this page [p]" accessKey=p 
  href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;printable=yes">Printable 
  version</A> 
  <LI id=t-permalink><A title="Permanent link to this version of the page" 
  href="http://en.wikipedia.org/w/index.php?title=Algorithm&amp;oldid=247158036">Permanent 
  link</A>
  <LI id=t-cite><A 
  href="http://en.wikipedia.org/w/index.php?title=Special:Cite&amp;page=Algorithm&amp;id=247158036">Cite 
  this page</A> </LI></UL></DIV></DIV>
<DIV class=portlet id=p-lang>
<H5>Languages</H5>
<DIV class=pBody>
<UL>
  <LI class=interwiki-af><A 
  href="http://af.wikipedia.org/wiki/Algoritme">Afrikaans</A> 
  <LI class=interwiki-ar><A 
  href="http://ar.wikipedia.org/wiki/%D8%AE%D9%88%D8%A7%D8%B1%D8%B2%D9%85%D9%8A%D8%A9">العربية</A> 

  <LI class=interwiki-an><A 
  href="http://an.wikipedia.org/wiki/Algorismo">Aragonés</A> 
  <LI class=interwiki-ast><A 
  href="http://ast.wikipedia.org/wiki/Algoritmu">Asturianu</A> 
  <LI class=interwiki-az><A 
  href="http://az.wikipedia.org/wiki/Alqoritm">Azərbaycan</A> 
  <LI class=interwiki-bn><A 
  href="http://bn.wikipedia.org/wiki/%E0%A6%85%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%B2%E0%A6%97%E0%A7%8B%E0%A6%B0%E0%A6%BF%E0%A6%A6%E0%A6%AE">বাংলা</A> 

  <LI class=interwiki-be><A 
  href="http://be.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%B0%D1%80%D1%8B%D1%82%D0%BC">Беларуская</A> 

  <LI class=interwiki-be-x-old><A 
  href="http://be-x-old.wikipedia.org/wiki/%D0%90%D0%BB%D1%8C%D0%B3%D0%B0%D1%80%D1%8B%D1%82%D0%BC">Беларуская 
  (тарашкевіца)</A> 
  <LI class=interwiki-bs><A 
  href="http://bs.wikipedia.org/wiki/Algoritam">Bosanski</A> 
  <LI class=interwiki-bg><A 
  href="http://bg.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D1%8A%D0%BC">Български</A> 

  <LI class=interwiki-ca><A 
  href="http://ca.wikipedia.org/wiki/Algorisme">Català</A> 
  <LI class=interwiki-cs><A 
  href="http://cs.wikipedia.org/wiki/Algoritmus">Česky</A> 
  <LI class=interwiki-da><A 
  href="http://da.wikipedia.org/wiki/Algoritme">Dansk</A> 
  <LI class=interwiki-de><A 
  href="http://de.wikipedia.org/wiki/Algorithmus">Deutsch</A> 
  <LI class=interwiki-et><A 
  href="http://et.wikipedia.org/wiki/Algoritm">Eesti</A> 
  <LI class=interwiki-el><A 
  href="http://el.wikipedia.org/wiki/%CE%91%CE%BB%CE%B3%CF%8C%CF%81%CE%B9%CE%B8%CE%BC%CE%BF%CF%82">Ελληνικά</A> 

  <LI class=interwiki-es><A 
  href="http://es.wikipedia.org/wiki/Algoritmo">Español</A> 
  <LI class=interwiki-eo><A 
  href="http://eo.wikipedia.org/wiki/Algoritmo">Esperanto</A> 
  <LI class=interwiki-fa><A 
  href="http://fa.wikipedia.org/wiki/%D8%A7%D9%84%DA%AF%D9%88%D8%B1%DB%8C%D8%AA%D9%85">فارسی</A> 

  <LI class=interwiki-fr><A 
  href="http://fr.wikipedia.org/wiki/Algorithmique">Français</A> 
  <LI class=interwiki-gl><A 
  href="http://gl.wikipedia.org/wiki/Algoritmo">Galego</A> 
  <LI class=interwiki-ko><A 
  href="http://ko.wikipedia.org/wiki/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98">한국어</A> 

  <LI class=interwiki-hi><A 
  href="http://hi.wikipedia.org/wiki/%E0%A4%85%E0%A4%B2%E0%A5%8D%E0%A4%97%E0%A5%8B%E0%A4%B0%E0%A4%BF%E0%A4%A6%E0%A5%8D%E0%A4%AE">हिन्दी</A> 

  <LI class=interwiki-hr><A 
  href="http://hr.wikipedia.org/wiki/Algoritam">Hrvatski</A> 
  <LI class=interwiki-id><A href="http://id.wikipedia.org/wiki/Algoritma">Bahasa 
  Indonesia</A> 
  <LI class=interwiki-ia><A 
  href="http://ia.wikipedia.org/wiki/Algorithmo">Interlingua</A> 
  <LI class=interwiki-is><A 
  href="http://is.wikipedia.org/wiki/Reiknirit">Íslenska</A> 
  <LI class=interwiki-it><A 
  href="http://it.wikipedia.org/wiki/Algoritmo">Italiano</A> 
  <LI class=interwiki-he><A 
  href="http://he.wikipedia.org/wiki/%D7%90%D7%9C%D7%92%D7%95%D7%A8%D7%99%D7%AA%D7%9D">עברית</A> 

  <LI class=interwiki-ka><A 
  href="http://ka.wikipedia.org/wiki/%E1%83%90%E1%83%9A%E1%83%92%E1%83%9D%E1%83%A0%E1%83%98%E1%83%97%E1%83%9B%E1%83%98">ქართული</A> 

  <LI class=interwiki-ku><A 
  href="http://ku.wikipedia.org/wiki/Algor%C3%AEtma">Kurdî / كوردی</A> 
  <LI class=interwiki-lv><A 
  href="http://lv.wikipedia.org/wiki/Algoritms">Latviešu</A> 
  <LI class=interwiki-lb><A 
  href="http://lb.wikipedia.org/wiki/Algorithmus">Lëtzebuergesch</A> 
  <LI class=interwiki-lt><A 
  href="http://lt.wikipedia.org/wiki/Algoritmas">Lietuvių</A> 
  <LI class=interwiki-hu><A 
  href="http://hu.wikipedia.org/wiki/Algoritmus">Magyar</A> 
  <LI class=interwiki-mk><A 
  href="http://mk.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%B0%D0%BC">Македонски</A> 

  <LI class=interwiki-ms><A href="http://ms.wikipedia.org/wiki/Algoritma">Bahasa 
  Melayu</A> 
  <LI class=interwiki-mn><A 
  href="http://mn.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC">Монгол</A> 

  <LI class=interwiki-nl><A 
  href="http://nl.wikipedia.org/wiki/Algoritme">Nederlands</A> 
  <LI class=interwiki-ja><A 
  href="http://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0">日本語</A> 

  <LI class=interwiki-no><A href="http://no.wikipedia.org/wiki/Algoritme">‪Norsk 
  (bokmål)‬</A> 
  <LI class=interwiki-nn><A href="http://nn.wikipedia.org/wiki/Algoritme">‪Norsk 
  (nynorsk)‬</A> 
  <LI class=interwiki-pl><A 
  href="http://pl.wikipedia.org/wiki/Algorytm">Polski</A> 
  <LI class=interwiki-pt><A 
  href="http://pt.wikipedia.org/wiki/Algoritmo">Português</A> 
  <LI class=interwiki-ro><A 
  href="http://ro.wikipedia.org/wiki/Algoritm">Română</A> 
  <LI class=interwiki-ru><A 
  href="http://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC">Русский</A> 

  <LI class=interwiki-sq><A 
  href="http://sq.wikipedia.org/wiki/Algoritmi">Shqip</A> 
  <LI class=interwiki-simple><A 
  href="http://simple.wikipedia.org/wiki/Algorithm">Simple English</A> 
  <LI class=interwiki-sd><A 
  href="http://sd.wikipedia.org/wiki/%D8%A7%D9%84%D8%AE%D9%88%D8%A7%D8%B1%D8%B2%D9%85%D9%8A">سنڌي</A> 

  <LI class=interwiki-sk><A 
  href="http://sk.wikipedia.org/wiki/Algoritmus">Slovenčina</A> 
  <LI class=interwiki-sl><A 
  href="http://sl.wikipedia.org/wiki/Algoritem">Slovenščina</A> 
  <LI class=interwiki-sr><A 
  href="http://sr.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%B0%D0%BC">Српски 
  / Srpski</A> 
  <LI class=interwiki-sh><A 
  href="http://sh.wikipedia.org/wiki/Algoritam">Srpskohrvatski / 
  Српскохрватски</A> 
  <LI class=interwiki-su><A href="http://su.wikipedia.org/wiki/Algoritma">Basa 
  Sunda</A> 
  <LI class=interwiki-fi><A 
  href="http://fi.wikipedia.org/wiki/Algoritmi">Suomi</A> 
  <LI class=interwiki-sv><A 
  href="http://sv.wikipedia.org/wiki/Algoritm">Svenska</A> 
  <LI class=interwiki-tl><A 
  href="http://tl.wikipedia.org/wiki/Algoritmo">Tagalog</A> 
  <LI class=interwiki-te><A 
  href="http://te.wikipedia.org/wiki/%E0%B0%85%E0%B0%B2%E0%B1%8D%E0%B0%97%E0%B0%BE%E0%B0%B0%E0%B0%BF%E0%B0%A5%E0%B0%82">తెలుగు</A> 

  <LI class=interwiki-th><A 
  href="http://th.wikipedia.org/wiki/%E0%B8%82%E0%B8%B1%E0%B9%89%E0%B8%99%E0%B8%95%E0%B8%AD%E0%B8%99%E0%B8%A7%E0%B8%B4%E0%B8%98%E0%B8%B5">ไทย</A> 

  <LI class=interwiki-vi><A 
  href="http://vi.wikipedia.org/wiki/Thu%E1%BA%ADt_to%C3%A1n">Tiếng Việt</A> 
  <LI class=interwiki-tg><A 
  href="http://tg.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC">Тоҷикӣ</A> 

  <LI class=interwiki-tr><A 
  href="http://tr.wikipedia.org/wiki/Algoritma">Türkçe</A> 
  <LI class=interwiki-uk><A 
  href="http://uk.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC">Українська</A> 

  <LI class=interwiki-wa><A 
  href="http://wa.wikipedia.org/wiki/Algorisse">Walon</A> 
  <LI class=interwiki-yi><A 
  href="http://yi.wikipedia.org/wiki/%D7%90%D7%9C%D7%92%D7%90%D7%A8%D7%99%D7%98%D7%9D">ייִדיש</A> 

  <LI class=interwiki-zh-yue><A 
  href="http://zh-yue.wikipedia.org/wiki/%E6%BC%94%E7%AE%97%E6%B3%95">粵語</A> 
  <LI class=interwiki-zh><A 
  href="http://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95">中文</A> 
</LI></UL></DIV></DIV></DIV><!-- end of the left (by default at least) column -->
<DIV class=visualClear></DIV>
<DIV id=footer>
<DIV id=f-poweredbyico><A href="http://www.mediawiki.org/"><IMG 
alt="Powered by MediaWiki" 
src="Algorithm_files/poweredby_mediawiki_88x31.png"></A></DIV>
<DIV id=f-copyrightico><A href="http://wikimediafoundation.org/"><IMG 
alt="Wikimedia Foundation" src="Algorithm_files/wikimedia-button.png" 
border=0></A></DIV>
<UL id=f-list>
  <LI id=lastmod>This page was last modified on 23 October 2008, at 12:42. 
  <LI id=copyright>All text is available under the terms of the <A 
  class=internal title="Wikipedia:Text of the GNU Free Documentation License" 
  href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License">GNU 
  Free Documentation License</A>. (See <B><A class=internal 
  title=Wikipedia:Copyrights 
  href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights">Copyrights</A></B> 
  for details.) <BR>Wikipedia® is a registered trademark of the <A 
  href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc</A>., a 
  U.S. registered <A class=internal title=501(c)(3) 
  href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29">501(c)(3)</A> 
  <A 
  href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</A> 
  <A class=internal title="Non-profit organization" 
  href="http://en.wikipedia.org/wiki/Non-profit_organization">nonprofit</A> <A 
  title="Charitable organization" 
  href="http://en.wikipedia.org/wiki/Charitable_organization">charity</A>.<BR>
  <LI id=privacy><A title="wikimedia:Privacy policy" 
  href="http://wikimediafoundation.org/wiki/Privacy_policy">Privacy policy</A> 
  <LI id=about><A title=Wikipedia:About 
  href="http://en.wikipedia.org/wiki/Wikipedia:About">About Wikipedia</A> 
  <LI id=disclaimer><A title="Wikipedia:General disclaimer" 
  href="http://en.wikipedia.org/wiki/Wikipedia:General_disclaimer">Disclaimers</A> 
  </LI></UL></DIV></DIV>
<SCRIPT type=text/javascript>if (window.runOnloadHook) runOnloadHook();</SCRIPT>
<!-- Served by srv174 in 0.094 secs. --></BODY></HTML>
