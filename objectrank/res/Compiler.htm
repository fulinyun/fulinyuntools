<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0038)http://en.wikipedia.org/wiki/Compilers -->
<HTML lang=en dir=ltr xml:lang="en" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Compiler - Wikipedia, the free encyclopedia</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<META content="MSHTML 6.00.6000.16705" name=GENERATOR>
<META 
content="Compiler,A-0 programming language,APL (programming language),Abstract interpretation,Alfred V. Aho,Algol60,Alias analysis,Amsterdam Compiler Kit,Application-specific integrated circuit,Assembly language,Atlas Autocode" 
name=keywords><LINK title="Edit this page" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit" 
type=application/x-wiki rel=alternate><LINK href="/favicon.ico" 
rel="shortcut icon"><LINK href="http://en.wikipedia.org/apple-touch-icon.png" 
rel=apple-touch-icon><LINK title="Wikipedia (en)" href="/w/opensearch_desc.php" 
type=application/opensearchdescription+xml rel=search><LINK 
href="http://www.gnu.org/copyleft/fdl.html" rel=copyright><LINK 
title="Wikipedia RSS Feed" 
href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=rss" 
type=application/rss+xml rel=alternate><LINK title="Wikipedia Atom Feed" 
href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" 
type=application/atom+xml rel=alternate><LINK media=screen 
href="Compiler_files/shared.css" type=text/css rel=stylesheet><LINK media=print 
href="Compiler_files/commonPrint.css" type=text/css rel=stylesheet><LINK 
media=screen href="Compiler_files/main.css" type=text/css rel=stylesheet><LINK 
media=handheld href="Compiler_files/main(1).css" type=text/css rel=stylesheet><!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE50Fixes.css?179" type="text/css" media="screen" /><![endif]--><!--[if IE 5.5000]><link rel="stylesheet" href="/skins-1.5/monobook/IE55Fixes.css?179" type="text/css" media="screen" /><![endif]--><!--[if IE 6]><link rel="stylesheet" href="/skins-1.5/monobook/IE60Fixes.css?179" type="text/css" media="screen" /><![endif]--><!--[if IE 7]><LINK 
media=screen href="Compiler_files/IE70Fixes.css" type=text/css rel=stylesheet><![endif]--><LINK href="Compiler_files/index.css" type=text/css 
rel=stylesheet><LINK media=print href="Compiler_files/index(1).css" 
type=text/css rel=stylesheet><LINK media=handheld 
href="Compiler_files/index(2).css" type=text/css rel=stylesheet><LINK 
href="Compiler_files/index(3).css" type=text/css rel=stylesheet><LINK 
href="Compiler_files/index(4).css" type=text/css rel=stylesheet><!--[if lt IE 7]><script type="text/javascript" src="/skins-1.5/common/IEFixes.js?179"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
<SCRIPT type=text/javascript>/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins-1.5";
		var wgArticlePath = "/wiki/$1";
		var wgScriptPath = "/w";
		var wgScript = "/w/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://en.wikipedia.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Compiler";
		var wgTitle = "Compiler";
		var wgAction = "view";
		var wgArticleId = "5739";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = "247177604";
		var wgVersion = "1.14alpha";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgMWSuggestTemplate = "http://en.wikipedia.org/w/api.php?action=opensearch\x26search={searchTerms}\x26namespace={namespaces}";
		var wgDBname = "enwiki";
		var wgSearchNamespaces = [0];
		var wgMWSuggestMessages = ["with suggestions", "no suggestions"];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</SCRIPT>

<SCRIPT src="Compiler_files/wikibits.js" type=text/javascript><!-- wikibits js --></SCRIPT>
<!-- Head Scripts -->
<SCRIPT src="Compiler_files/ajax.js" type=text/javascript></SCRIPT>

<SCRIPT src="Compiler_files/mwsuggest.js" type=text/javascript></SCRIPT>

<SCRIPT src="Compiler_files/index.php" 
type=text/javascript><!-- site js --></SCRIPT>
</HEAD>
<BODY class="mediawiki ltr ns-0 ns-subject page-Compiler skin-monobook">
<DIV id=globalWrapper>
<DIV id=column-content>
<DIV id=content><A id=top name=top></A>
<DIV id=siteNotice>
<SCRIPT language=JavaScript type=text/javascript>
<!--
document.writeln("\x3cp\x3e\x3c/p\x3e\n");
-->
</SCRIPT>
</DIV>
<H1 class=firstHeading>Compiler</H1>
<DIV id=bodyContent>
<H3 id=siteSub>From Wikipedia, the free encyclopedia</H3>
<DIV id=contentSub>&nbsp;&nbsp;(Redirected from <A title=Compilers 
href="http://en.wikipedia.org/w/index.php?title=Compilers&amp;redirect=no">Compilers</A>)</DIV>
<DIV id=jump-to-nav>Jump to: <A 
href="http://en.wikipedia.org/wiki/Compilers#column-one">navigation</A>, <A 
href="http://en.wikipedia.org/wiki/Compilers#searchInput">search</A></DIV><!-- start content -->
<DIV class=dablink>This article is about the computing term. For the anime, see 
<A title="Compiler (anime)" 
href="http://en.wikipedia.org/wiki/Compiler_(anime)">Compiler (anime)</A>.</DIV>
<DIV class="thumb tright">
<DIV class=thumbinner style="WIDTH: 352px"><A class=image 
title="A diagram of the operation of a typical multi-language, multi-target compiler." 
href="http://en.wikipedia.org/wiki/Image:Compiler.svg"><IMG class=thumbimage 
height=395 
alt="A diagram of the operation of a typical multi-language, multi-target compiler." 
src="Compiler_files/350px-Compiler.svg.png" width=350 border=0></A> 
<DIV class=thumbcaption>
<DIV class=magnify><A class=internal title=Enlarge 
href="http://en.wikipedia.org/wiki/Image:Compiler.svg"><IMG height=11 alt="" 
src="Compiler_files/magnify-clip.png" width=15></A></DIV>A diagram of the 
operation of a typical multi-language, multi-target compiler.</DIV></DIV></DIV>
<P>A <B>compiler</B> is a <A title="Computer program" 
href="http://en.wikipedia.org/wiki/Computer_program">computer program</A> (or 
set of programs) that translates text written in a <A 
title="Programming language" 
href="http://en.wikipedia.org/wiki/Programming_language">computer language</A> 
(the <I>source language</I>) into another computer language (the <I>target 
language</I>). The original sequence is usually called the <I><A 
title="Source code" href="http://en.wikipedia.org/wiki/Source_code">source 
code</A></I> and the output called <I><A class=mw-redirect title="Object code" 
href="http://en.wikipedia.org/wiki/Object_code">object code</A></I>. Commonly 
the output has a form suitable for processing by other programs (e.g., a <A 
title=Linker href="http://en.wikipedia.org/wiki/Linker">linker</A>), but it may 
be a human-readable <A title="Text file" 
href="http://en.wikipedia.org/wiki/Text_file">text file</A>.</P>
<P>The most common reason for wanting to translate source code is to create an 
<A title=Executable 
href="http://en.wikipedia.org/wiki/Executable">executable</A> program. The name 
"compiler" is primarily used for programs that translate source code from a <A 
title="High-level programming language" 
href="http://en.wikipedia.org/wiki/High-level_programming_language">high-level 
programming language</A> to a lower level language (e.g., <A 
title="Assembly language" 
href="http://en.wikipedia.org/wiki/Assembly_language">assembly language</A> or 
<A class=mw-redirect title="Machine language" 
href="http://en.wikipedia.org/wiki/Machine_language">machine language</A>). A 
program that translates from a low level language to a higher level one is a 
<I><A title=Decompiler 
href="http://en.wikipedia.org/wiki/Decompiler">decompiler</A></I>. A program 
that translates between high-level languages is usually called a <I>language 
translator</I>, <I>source to source translator</I>, or <I>language 
converter</I>. A <I>language <A title=Rewriting 
href="http://en.wikipedia.org/wiki/Rewriting">rewriter</A></I> is usually a 
program that translates the form of expressions without a change of 
language.</P>
<P>A compiler is likely to perform many or all of the following operations: <A 
title="Lexical analysis" 
href="http://en.wikipedia.org/wiki/Lexical_analysis">lexical analysis</A>, <A 
class=mw-redirect title=Preprocessing 
href="http://en.wikipedia.org/wiki/Preprocessing">preprocessing</A>, <A 
title=Parsing href="http://en.wikipedia.org/wiki/Parsing">parsing</A>, semantic 
analysis, <A title="Code generation (compiler)" 
href="http://en.wikipedia.org/wiki/Code_generation_(compiler)">code 
generation</A>, and <A class=mw-redirect title="Code optimization" 
href="http://en.wikipedia.org/wiki/Code_optimization">code optimization</A>.</P>
<TABLE class=toc id=toc summary=Contents>
  <TBODY>
  <TR>
    <TD>
      <DIV id=toctitle>
      <H2>Contents</H2></DIV>
      <UL>
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Compilers#History"><SPAN 
        class=tocnumber>1</SPAN> <SPAN class=toctext>History</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Compilers#Compilers_in_education"><SPAN 
          class=tocnumber>1.1</SPAN> <SPAN class=toctext>Compilers in 
          education</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Compilers#Compiler_output"><SPAN 
        class=tocnumber>2</SPAN> <SPAN class=toctext>Compiler output</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Compilers#Compiled_versus_interpreted_languages"><SPAN 
          class=tocnumber>2.1</SPAN> <SPAN class=toctext>Compiled versus 
          interpreted languages</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Compilers#Hardware_compilation"><SPAN 
          class=tocnumber>2.2</SPAN> <SPAN class=toctext>Hardware 
          compilation</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Compilers#Compiler_design"><SPAN 
        class=tocnumber>3</SPAN> <SPAN class=toctext>Compiler design</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Compilers#One-pass_versus_multi-pass_compilers"><SPAN 
          class=tocnumber>3.1</SPAN> <SPAN class=toctext>One-pass versus 
          multi-pass compilers</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Compilers#Front_end"><SPAN 
          class=tocnumber>3.2</SPAN> <SPAN class=toctext>Front end</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://en.wikipedia.org/wiki/Compilers#Back_end"><SPAN 
          class=tocnumber>3.3</SPAN> <SPAN class=toctext>Back end</SPAN></A> 
          </LI></UL>
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Compilers#Related_techniques"><SPAN 
        class=tocnumber>4</SPAN> <SPAN class=toctext>Related 
        techniques</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Compilers#See_also"><SPAN 
        class=tocnumber>5</SPAN> <SPAN class=toctext>See also</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Compilers#Notes"><SPAN 
        class=tocnumber>6</SPAN> <SPAN class=toctext>Notes</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Compilers#References"><SPAN 
        class=tocnumber>7</SPAN> <SPAN class=toctext>References</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://en.wikipedia.org/wiki/Compilers#External_links"><SPAN 
        class=tocnumber>8</SPAN> <SPAN class=toctext>External links</SPAN></A> 
        </LI></UL></TD></TR></TBODY></TABLE>
<SCRIPT type=text/javascript>
//<![CDATA[
 if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } 
//]]>
</SCRIPT>

<P><A id=History name=History></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: History" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=1">edit</A>]</SPAN> 
<SPAN class=mw-headline>History</SPAN></H2>
<P>Software for early computers was primarily written in assembly language for 
many years. Higher level programming languages were not invented until the 
benefits of being able to reuse software on different kinds of <A 
class=mw-redirect title=CPU href="http://en.wikipedia.org/wiki/CPU">CPUs</A> 
started to become significantly greater than the cost of writing a compiler. The 
very limited <A class=mw-redirect title="Computer storage" 
href="http://en.wikipedia.org/wiki/Computer_storage">memory</A> capacity of 
early computers also created many technical problems when implementing a 
compiler.</P>
<P>Towards the end of the 1950s, machine-independent programming languages were 
first proposed. Subsequently, several experimental compilers were developed. The 
first compiler was written by <A title="Grace Hopper" 
href="http://en.wikipedia.org/wiki/Grace_Hopper">Grace Hopper</A>, in 1952, for 
the <A class=mw-redirect title="A-0 programming language" 
href="http://en.wikipedia.org/wiki/A-0_programming_language">A-0 programming 
language</A>. The <A class=mw-redirect title=FORTRAN 
href="http://en.wikipedia.org/wiki/FORTRAN">FORTRAN</A> team led by <A 
title="John Backus" href="http://en.wikipedia.org/wiki/John_Backus">John 
Backus</A> at <A title=IBM href="http://en.wikipedia.org/wiki/IBM">IBM</A> is 
generally credited as having introduced the first complete compiler, in 1957. <A 
title=COBOL href="http://en.wikipedia.org/wiki/COBOL">COBOL</A> was an early 
language to be compiled on multiple architectures, in 1960.<SUP class=reference 
id=cite_ref-0><A title="" 
href="http://en.wikipedia.org/wiki/Compilers#cite_note-0">[1]</A></SUP></P>
<P>In many application domains the idea of using a higher level language quickly 
caught on. Because of the expanding functionality supported by newer <A 
title="Programming language" 
href="http://en.wikipedia.org/wiki/Programming_language">programming 
languages</A> and the increasing complexity of computer architectures, compilers 
have become more and more complex.</P>
<P>Early compilers were written in assembly language. The first <I><A 
title=Self-hosting 
href="http://en.wikipedia.org/wiki/Self-hosting">self-hosting</A></I> compiler — 
capable of compiling its own source code in a high-level language — was created 
for <A class=mw-redirect title="Lisp programming language" 
href="http://en.wikipedia.org/wiki/Lisp_programming_language">Lisp</A> by Hart 
and Levin at <A title="Massachusetts Institute of Technology" 
href="http://en.wikipedia.org/wiki/Massachusetts_Institute_of_Technology">MIT</A> 
in 1962.<SUP class=reference id=cite_ref-1><A title="" 
href="http://en.wikipedia.org/wiki/Compilers#cite_note-1">[2]</A></SUP> Since 
the 1970s it has become common practice to implement a compiler in the language 
it compiles, although both <A title="Pascal (programming language)" 
href="http://en.wikipedia.org/wiki/Pascal_(programming_language)">Pascal</A> and 
<A title="C (programming language)" 
href="http://en.wikipedia.org/wiki/C_(programming_language)">C</A> have been 
popular choices for implementation language. Building a self-hosting compiler is 
a <A title="Bootstrapping (compilers)" 
href="http://en.wikipedia.org/wiki/Bootstrapping_(compilers)">bootstrapping</A> 
problem -- the first such compiler for a language must be compiled either by a 
compiler written in a different language, or (as in Hart and Levin's Lisp 
compiler) compiled by running the compiler in an <A 
title="Interpreter (computing)" 
href="http://en.wikipedia.org/wiki/Interpreter_(computing)">interpreter</A>.</P>
<P><A id=Compilers_in_education name=Compilers_in_education></A></P>
<H3><SPAN class=editsection>[<A title="Edit section: Compilers in education" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=2">edit</A>]</SPAN> 
<SPAN class=mw-headline>Compilers in education</SPAN></H3>
<P>Compiler construction and <A title="Compiler optimization" 
href="http://en.wikipedia.org/wiki/Compiler_optimization">compiler 
optimization</A> are taught at universities as part of the <A 
title="Computer science" 
href="http://en.wikipedia.org/wiki/Computer_science">computer science</A> 
curriculum. Such courses are usually supplemented with the implementation of a 
compiler for an <A title="Educational programming language" 
href="http://en.wikipedia.org/wiki/Educational_programming_language">educational 
programming language</A>. A well-documented example is <A title="Niklaus Wirth" 
href="http://en.wikipedia.org/wiki/Niklaus_Wirth">Niklaus Wirth</A>'s <A 
title=PL/0 href="http://en.wikipedia.org/wiki/PL/0">PL/0</A> compiler, which 
Wirth used to teach compiler construction in the 1970s.<SUP class=reference 
id=cite_ref-2><A title="" 
href="http://en.wikipedia.org/wiki/Compilers#cite_note-2">[3]</A></SUP> In spite 
of its simplicity, the PL/0 compiler introduced several influential concepts to 
the field:</P>
<OL>
  <LI>Program development by stepwise refinement (also the title of a 1971 paper 
  by Wirth<SUP class=reference id=cite_ref-3><A title="" 
  href="http://en.wikipedia.org/wiki/Compilers#cite_note-3">[4]</A></SUP>) 
  <LI>The use of a <A title="Recursive descent parser" 
  href="http://en.wikipedia.org/wiki/Recursive_descent_parser">recursive descent 
  parser</A> 
  <LI>The use of <A class=mw-redirect title=EBNF 
  href="http://en.wikipedia.org/wiki/EBNF">EBNF</A> to specify the syntax of a 
  language 
  <LI>A <A title="Code generation (compiler)" 
  href="http://en.wikipedia.org/wiki/Code_generation_(compiler)">code 
  generator</A> producing portable <A title=P-code 
  href="http://en.wikipedia.org/wiki/P-code">P-code</A> 
  <LI>The use of <A class=new title="T-diagram (page does not exist)" 
  href="http://en.wikipedia.org/w/index.php?title=T-diagram&amp;action=edit&amp;redlink=1">T-diagrams</A> 
  in the formal description of the <A title="Bootstrapping (compilers)" 
  href="http://en.wikipedia.org/wiki/Bootstrapping_(compilers)">bootstrapping</A> 
  problem </LI></OL>
<P><A id=Compiler_output name=Compiler_output></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: Compiler output" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=3">edit</A>]</SPAN> 
<SPAN class=mw-headline>Compiler output</SPAN></H2>
<P>One classification of compilers is by the <A class=mw-redirect 
title="Platform (computing)" 
href="http://en.wikipedia.org/wiki/Platform_(computing)">platform</A> on which 
their generated code executes. This is known as the <I>target platform.</I></P>
<P>A <I>native</I> or <I>hosted</I> compiler is one whose output is intended to 
directly run on the same type of computer and operating system as the compiler 
itself runs on. The output of a <A title="Cross compiler" 
href="http://en.wikipedia.org/wiki/Cross_compiler">cross compiler</A> is 
designed to run on a different platform. Cross compilers are often used when 
developing software for <A title="Embedded system" 
href="http://en.wikipedia.org/wiki/Embedded_system">embedded systems</A> that 
are not intended to support a software development environment.</P>
<P>The output of a compiler that produces code for a <A title="Virtual machine" 
href="http://en.wikipedia.org/wiki/Virtual_machine">virtual machine</A> (VM) may 
or may not be executed on the same platform as the compiler that produced it. 
For this reason such compilers are not usually classified as native or cross 
compilers.</P>
<P><A id=Compiled_versus_interpreted_languages 
name=Compiled_versus_interpreted_languages></A></P>
<H3><SPAN class=editsection>[<A 
title="Edit section: Compiled versus interpreted languages" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=4">edit</A>]</SPAN> 
<SPAN class=mw-headline>Compiled versus interpreted languages</SPAN></H3>
<P>Higher-level programming languages are generally divided for convenience into 
<A title="Compiled language" 
href="http://en.wikipedia.org/wiki/Compiled_language">compiled languages</A> and 
<A title="Interpreted language" 
href="http://en.wikipedia.org/wiki/Interpreted_language">interpreted 
languages</A>. However, there is rarely anything about a language that 
<I>requires</I> it to be exclusively compiled, or exclusively interpreted. The 
categorization usually reflects the most popular or widespread implementations 
of a language — for instance, BASIC is sometimes called an interpreted language, 
and C a compiled one, despite the existence of BASIC compilers and C 
interpreters.</P>
<P>In a sense, <I>all</I> languages are interpreted, with "execution" being 
merely a special case of interpretation performed by <A title=Transistor 
href="http://en.wikipedia.org/wiki/Transistor">transistors</A> switching on a <A 
class=mw-redirect title=CPU href="http://en.wikipedia.org/wiki/CPU">CPU</A>. 
Modern trends toward <A title="Just-in-time compilation" 
href="http://en.wikipedia.org/wiki/Just-in-time_compilation">just-in-time 
compilation</A> and <A title=Bytecode 
href="http://en.wikipedia.org/wiki/Bytecode">bytecode interpretation</A> also 
blur the traditional categorizations.</P>
<P>There are exceptions. Some language specifications spell out that 
implementations <I>must</I> include a compilation facility; for example, <A 
title="Common Lisp" href="http://en.wikipedia.org/wiki/Common_Lisp">Common 
Lisp</A>. Other languages have features that are very easy to implement in an 
interpreter, but make writing a compiler much harder; for example, <A 
title="APL (programming language)" 
href="http://en.wikipedia.org/wiki/APL_(programming_language)">APL</A>, <A 
class=mw-redirect title=SNOBOL4 
href="http://en.wikipedia.org/wiki/SNOBOL4">SNOBOL4</A>, and many scripting 
languages allow programs to construct arbitrary source code at runtime with 
regular string operations, and then execute that code by passing it to a special 
evaluation function. To implement these features in a compiled language, 
programs must usually be shipped with a <A title="Runtime library" 
href="http://en.wikipedia.org/wiki/Runtime_library">runtime library</A> that 
includes a version of the compiler itself.</P>
<P><A id=Hardware_compilation name=Hardware_compilation></A></P>
<H3><SPAN class=editsection>[<A title="Edit section: Hardware compilation" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=5">edit</A>]</SPAN> 
<SPAN class=mw-headline>Hardware compilation</SPAN></H3>
<P>The output of some compilers may target <A title=Hardware 
href="http://en.wikipedia.org/wiki/Hardware">hardware</A> at a very low level. 
For example a <A class=mw-redirect title="Field Programmable Gate Array" 
href="http://en.wikipedia.org/wiki/Field_Programmable_Gate_Array">Field 
Programmable Gate Array</A> (FPGA) or structured <A 
title="Application-specific integrated circuit" 
href="http://en.wikipedia.org/wiki/Application-specific_integrated_circuit">Application-specific 
integrated circuit</A> (ASIC). Such compilers are said to be <I><A 
class=mw-redirect title="Hardware compiler" 
href="http://en.wikipedia.org/wiki/Hardware_compiler">hardware compilers</A></I> 
or synthesis tools because the programs they compile effectively control the 
final configuration of the hardware and how it operates; the output of the 
compilation are not instructions that are executed in sequence - only an 
interconnection of transistors or lookup tables. For example, XST is the Xilinx 
Synthesis Tool used for configuring FPGAs. Similar tools are available from 
Altera, Synplicity, Synopsys and other vendors.</P>
<P><A id=Compiler_design name=Compiler_design></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: Compiler design" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=6">edit</A>]</SPAN> 
<SPAN class=mw-headline>Compiler design</SPAN></H2>
<P>The approach taken to compiler design is affected by the complexity of the 
processing that needs to be done, the experience of the person(s) designing it, 
and the resources (eg, people and tools) available.</P>
<P>A compiler for a relatively simple language written by one person might be a 
single, monolithic piece of software. When the source language is large and 
complex, and high quality output is required the design may be split into a 
number of relatively independent phases, or passes. Having separate phases means 
development can be parceled up into small parts and given to different people. 
It also becomes much easier to replace a single phase by an improved one, or to 
insert new phases later (eg, additional optimizations).</P>
<P>The division of the compilation processes in phases (or passes) was 
championed by the <A class=mw-redirect 
title="Production Quality Compiler-Compiler Project" 
href="http://en.wikipedia.org/wiki/Production_Quality_Compiler-Compiler_Project">Production 
Quality Compiler-Compiler Project</A> (PQCC) at <A class=mw-redirect 
title="Carnegie Mellon" 
href="http://en.wikipedia.org/wiki/Carnegie_Mellon">Carnegie Mellon</A> 
University. This project introduced the terms <I>front end</I>, <I>middle 
end</I>, and <I>back end</I>.</P>
<P>All but the smallest of compilers have more than two phases. However, these 
phases are usually regarded as being part of the front end or the back end. The 
point at where these two <I>ends</I> meet is always open to debate. The front 
end is generally considered to be where syntactic and semantic processing takes 
place, along with translation to a lower level of representation (than source 
code).</P>
<P>The middle end is usually designed to perform optimizations on a form other 
than the source code or machine code. This source code/machine code independence 
is intended to enable generic optimizations to be shared between versions of the 
compiler supporting different languages and target processors.</P>
<P>The back end takes the output from the middle. It may perform more analysis, 
transformations and optimizations that are for a particular computer. Then, it 
generates code for a particular processor and OS.</P>
<P>This front-end/middle/back-end approach makes it possible to combine front 
ends for different <A title="Programming language" 
href="http://en.wikipedia.org/wiki/Programming_language">languages</A> with back 
ends for different <A class=mw-redirect title=CPU 
href="http://en.wikipedia.org/wiki/CPU">CPUs</A>. Practical examples of this 
approach are the <A title="GNU Compiler Collection" 
href="http://en.wikipedia.org/wiki/GNU_Compiler_Collection">GNU Compiler 
Collection</A>, <A class=mw-redirect title=LLVM 
href="http://en.wikipedia.org/wiki/LLVM">LLVM</A>, and the <A 
title="Amsterdam Compiler Kit" 
href="http://en.wikipedia.org/wiki/Amsterdam_Compiler_Kit">Amsterdam Compiler 
Kit</A>, which have multiple front-ends, shared analysis and multiple 
back-ends.</P>
<P><A id=One-pass_versus_multi-pass_compilers 
name=One-pass_versus_multi-pass_compilers></A></P>
<H3><SPAN class=editsection>[<A 
title="Edit section: One-pass versus multi-pass compilers" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=7">edit</A>]</SPAN> 
<SPAN class=mw-headline>One-pass versus multi-pass compilers</SPAN></H3>
<P>Classifying compilers by number of passes has its background in the hardware 
resource limitations of computers. Compiling involves performing lots of work 
and early computers did not have enough memory to contain one program that did 
all of this work. So compilers were split up into smaller programs which each 
made a pass over the source (or some representation of it) performing some of 
the required analysis and translations.</P>
<P>The ability to compile in a <A title="One-pass compiler" 
href="http://en.wikipedia.org/wiki/One-pass_compiler">single pass</A> is often 
seen as a benefit because it simplifies the job of writing a compiler and one 
pass compilers are generally faster than <A title="Multi-pass compiler" 
href="http://en.wikipedia.org/wiki/Multi-pass_compiler">multi-pass 
compilers</A>. Many languages were designed so that they could be compiled in a 
single pass (e.g., <A title="Pascal (programming language)" 
href="http://en.wikipedia.org/wiki/Pascal_(programming_language)">Pascal</A>).</P>
<P>In some cases the design of a language feature may require a compiler to 
perform more than one pass over the source. For instance, consider a declaration 
appearing on line 20 of the source which affects the translation of a statement 
appearing on line 10. In this case, the first pass needs to gather information 
about declarations appearing after statements that they affect, with the actual 
translation happening during a subsequent pass.</P>
<P>The disadvantage of compiling in a single pass is that it is not possible to 
perform many of the sophisticated <A title="Compiler optimization" 
href="http://en.wikipedia.org/wiki/Compiler_optimization">optimizations</A> 
needed to generate high quality code. It can be difficult to count exactly how 
many passes an optimizing compiler makes. For instance, different phases of 
optimization may analyse one expression many times but only analyse another 
expression once.</P>
<P>Splitting a compiler up into small programs is a technique used by 
researchers interested in producing provably correct compilers. Proving the 
correctness of a set of small programs often requires less effort than proving 
the correctness of a larger, single, equivalent program.</P>
<P>While the typical multi-pass compiler outputs machine code from its final 
pass, there are several other types:</P>
<UL>
  <LI>A "<A title="Source-to-source compiler" 
  href="http://en.wikipedia.org/wiki/Source-to-source_compiler">source-to-source 
  compiler</A>" is a type of compiler that takes a high level language as its 
  input and outputs a high level language. For example, an automatic 
  parallelizing compiler will frequently take in a high level language program 
  as an input and then transform the code and annotate it with parallel code 
  annotations (e.g. <A title=OpenMP 
  href="http://en.wikipedia.org/wiki/OpenMP">OpenMP</A>) or language constructs 
  (e.g. Fortran's <CODE>DOALL</CODE> statements). 
  <LI><A class=new title="Stage compiler (page does not exist)" 
  href="http://en.wikipedia.org/w/index.php?title=Stage_compiler&amp;action=edit&amp;redlink=1">Stage 
  compiler</A> that compiles to assembly language of a theoretical machine, like 
  some <A title=Prolog href="http://en.wikipedia.org/wiki/Prolog">Prolog</A> 
  implementations 
  <UL>
    <LI>This Prolog machine is also known as the <A class=mw-redirect 
    title="Warren Abstract Machine" 
    href="http://en.wikipedia.org/wiki/Warren_Abstract_Machine">Warren Abstract 
    Machine</A> (or WAM). Bytecode compilers for Java, <A class=mw-redirect 
    title="Python language" 
    href="http://en.wikipedia.org/wiki/Python_language">Python</A>, and many 
    more are also a subtype of this. </LI></UL>
  <LI><A title="Just-in-time compilation" 
  href="http://en.wikipedia.org/wiki/Just-in-time_compilation">Just-in-time 
  compiler</A>, used by Smalltalk and Java systems, and also by Microsoft .Net's 
  <A title="Common Intermediate Language" 
  href="http://en.wikipedia.org/wiki/Common_Intermediate_Language">Common 
  Intermediate Language</A> (CIL) 
  <UL>
    <LI>Applications are delivered in <A title=Bytecode 
    href="http://en.wikipedia.org/wiki/Bytecode">bytecode</A>, which is compiled 
    to native machine code just prior to execution. </LI></UL></LI></UL>
<P><A id=Front_end name=Front_end></A></P>
<H3><SPAN class=editsection>[<A title="Edit section: Front end" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=8">edit</A>]</SPAN> 
<SPAN class=mw-headline>Front end</SPAN></H3>
<P>The front end analyzes the source code to build an internal representation of 
the program, called the <A title="Intermediate representation" 
href="http://en.wikipedia.org/wiki/Intermediate_representation">intermediate 
representation</A> or <I>IR</I>. It also manages the <A title="Symbol table" 
href="http://en.wikipedia.org/wiki/Symbol_table">symbol table</A>, a data 
structure mapping each symbol in the source code to associated information such 
as location, type and scope. This is done over several phases, which includes 
some of the following:</P>
<OL>
  <LI><B>Line reconstruction</B>. Languages which <A title=Stropping 
  href="http://en.wikipedia.org/wiki/Stropping">strop</A> their keywords or 
  allow arbitrary spaces within identifiers require a phase before parsing, 
  which converts the input character sequence to a canonical form ready for the 
  parser. The <A title="Top-down parsing" 
  href="http://en.wikipedia.org/wiki/Top-down_parsing">top-down</A>, <A 
  title="Recursive descent parser" 
  href="http://en.wikipedia.org/wiki/Recursive_descent_parser">recursive-descent</A>, 
  table-driven parsers used in the 1960s typically read the source one character 
  at a time and did not require a separate tokenizing phase. <A 
  title="Atlas Autocode" 
  href="http://en.wikipedia.org/wiki/Atlas_Autocode">Atlas Autocode</A>, and <A 
  title="Edinburgh IMP" 
  href="http://en.wikipedia.org/wiki/Edinburgh_IMP">Imp</A> (and some 
  implementations of <A class=mw-redirect title=Algol60 
  href="http://en.wikipedia.org/wiki/Algol60">Algol</A> and <A class=mw-redirect 
  title=CORAL66 href="http://en.wikipedia.org/wiki/CORAL66">Coral66</A>) are 
  examples of stropped languages whose compilers would have a <I>Line 
  Reconstruction</I> phase. 
  <LI><A title="Lexical analysis" 
  href="http://en.wikipedia.org/wiki/Lexical_analysis">Lexical analysis</A> 
  breaks the source code text into small pieces called <I>tokens</I>. Each token 
  is a single atomic unit of the language, for instance a <A class=mw-redirect 
  title="Keyword (computing)" 
  href="http://en.wikipedia.org/wiki/Keyword_(computing)">keyword</A>, <A 
  title=Identifier href="http://en.wikipedia.org/wiki/Identifier">identifier</A> 
  or <A title=Symbol href="http://en.wikipedia.org/wiki/Symbol">symbol name</A>. 
  The token syntax is typically a <A title="Regular language" 
  href="http://en.wikipedia.org/wiki/Regular_language">regular language</A>, so 
  a <A class=mw-redirect title="Finite state automaton" 
  href="http://en.wikipedia.org/wiki/Finite_state_automaton">finite state 
  automaton</A> constructed from a <A title="Regular expression" 
  href="http://en.wikipedia.org/wiki/Regular_expression">regular expression</A> 
  can be used to recognize it. This phase is also called lexing or scanning, and 
  the software doing lexical analysis is called a <A class=mw-redirect 
  title="Lexical analyzer" 
  href="http://en.wikipedia.org/wiki/Lexical_analyzer">lexical analyzer</A> or 
  scanner. 
  <LI><A title=Preprocessor 
  href="http://en.wikipedia.org/wiki/Preprocessor">Preprocessing</A>. Some 
  languages, e.g., <A title="C (programming language)" 
  href="http://en.wikipedia.org/wiki/C_(programming_language)">C</A>, require a 
  preprocessing phase which supports <A title="Macro (computer science)" 
  href="http://en.wikipedia.org/wiki/Macro_(computer_science)">macro</A> 
  substitution and conditional compilation. Typically the preprocessing phase 
  occurs before syntactic or semantic analysis; e.g. in the case of C, the 
  preprocessor manipulates lexical tokens rather than syntactic forms. However, 
  some languages such as <A title=Scheme 
  href="http://en.wikipedia.org/wiki/Scheme">Scheme</A> support macro 
  substitutions based on syntactic forms. 
  <LI><A class=mw-redirect title="Syntax analysis" 
  href="http://en.wikipedia.org/wiki/Syntax_analysis">Syntax analysis</A> 
  involves <A title=Parsing 
  href="http://en.wikipedia.org/wiki/Parsing">parsing</A> the token sequence to 
  identify the syntactic structure of the program. This phase typically builds a 
  <A title="Parse tree" href="http://en.wikipedia.org/wiki/Parse_tree">parse 
  tree</A>, which replaces the linear sequence of tokens with a tree structure 
  built according to the rules of a <A title="Formal grammar" 
  href="http://en.wikipedia.org/wiki/Formal_grammar">formal grammar</A> which 
  define the language's syntax. The parse tree is often analyzed, augmented, and 
  transformed by later phases in the compiler. 
  <LI>Semantic analysis is the phase in which the compiler adds semantic 
  information to the <A title="Parse tree" 
  href="http://en.wikipedia.org/wiki/Parse_tree">parse tree</A> and builds the 
  symbol table. This phase performs semantic checks such as <A class=mw-redirect 
  title="Type checking" href="http://en.wikipedia.org/wiki/Type_checking">type 
  checking</A> (checking for type errors), or <A title="Object binding" 
  href="http://en.wikipedia.org/wiki/Object_binding">object binding</A> 
  (associating variable and function references with their definitions), or 
  <B>definite assignment</B> (requiring all local variables to be initialized 
  before use), rejecting incorrect programs or issuing warnings. Semantic 
  analysis usually requires a complete parse tree, meaning that this phase 
  logically follows the <A title=Parsing 
  href="http://en.wikipedia.org/wiki/Parsing">parsing</A> phase, and logically 
  precedes the <A title="Code generation (compiler)" 
  href="http://en.wikipedia.org/wiki/Code_generation_(compiler)">code 
  generation</A> phase, though it is often possible to fold multiple phases into 
  one pass over the code in a compiler implementation. </LI></OL>
<P><A id=Back_end name=Back_end></A></P>
<H3><SPAN class=editsection>[<A title="Edit section: Back end" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=9">edit</A>]</SPAN> 
<SPAN class=mw-headline>Back end</SPAN></H3>
<P>The term <I>back end</I> is sometimes confused with <I><A 
title="Code generation (compiler)" 
href="http://en.wikipedia.org/wiki/Code_generation_(compiler)">code 
generator</A></I> because of the overlapped functionality of generating assembly 
code. Some literature uses <I>middle end</I> to distinguish the generic analysis 
and optimization phases in the back end from the machine-dependent code 
generators.</P>
<P>The main phases of the back end include the following:</P>
<OL>
  <LI><A class=mw-redirect title="Compiler analysis" 
  href="http://en.wikipedia.org/wiki/Compiler_analysis">Analysis</A>: This is 
  the gathering of program information from the intermediate representation 
  derived from the input. Typical analyses are <A class=mw-redirect 
  title="Data flow analysis" 
  href="http://en.wikipedia.org/wiki/Data_flow_analysis">data flow analysis</A> 
  to build <A title="Use-define chain" 
  href="http://en.wikipedia.org/wiki/Use-define_chain">use-define chains</A>, <A 
  title="Dependence analysis" 
  href="http://en.wikipedia.org/wiki/Dependence_analysis">dependence 
  analysis</A>, <A title="Alias analysis" 
  href="http://en.wikipedia.org/wiki/Alias_analysis">alias analysis</A>, <A 
  title="Pointer analysis" 
  href="http://en.wikipedia.org/wiki/Pointer_analysis">pointer analysis</A>, <A 
  title="Escape analysis" 
  href="http://en.wikipedia.org/wiki/Escape_analysis">escape analysis</A> etc. 
  Accurate analysis is the basis for any compiler optimization. The <A 
  title="Call graph" href="http://en.wikipedia.org/wiki/Call_graph">call 
  graph</A> and <A title="Control flow graph" 
  href="http://en.wikipedia.org/wiki/Control_flow_graph">control flow graph</A> 
  are usually also built during the analysis phase. 
  <LI><A title="Compiler optimization" 
  href="http://en.wikipedia.org/wiki/Compiler_optimization">Optimization</A>: 
  the intermediate language representation is transformed into functionally 
  equivalent but faster (or smaller) forms. Popular optimizations are <A 
  title="Inline expansion" 
  href="http://en.wikipedia.org/wiki/Inline_expansion">inline expansion</A>, <A 
  title="Dead code elimination" 
  href="http://en.wikipedia.org/wiki/Dead_code_elimination">dead code 
  elimination</A>, <A class=mw-redirect title="Constant propagation" 
  href="http://en.wikipedia.org/wiki/Constant_propagation">constant 
  propagation</A>, <A class=mw-redirect title="Loop transformation" 
  href="http://en.wikipedia.org/wiki/Loop_transformation">loop 
  transformation</A>, <A title="Register allocation" 
  href="http://en.wikipedia.org/wiki/Register_allocation">register 
  allocation</A> or even <A title="Automatic parallelization" 
  href="http://en.wikipedia.org/wiki/Automatic_parallelization">automatic 
  parallelization</A>. 
  <LI><A title="Code generation (compiler)" 
  href="http://en.wikipedia.org/wiki/Code_generation_(compiler)">Code 
  generation</A>: the transformed intermediate language is translated into the 
  output language, usually the native <A class=mw-redirect 
  title="Machine language" 
  href="http://en.wikipedia.org/wiki/Machine_language">machine language</A> of 
  the system. This involves resource and storage decisions, such as deciding 
  which variables to fit into registers and memory and the selection and 
  scheduling of appropriate machine instructions along with their associated 
  addressing modes (see also <A title="Sethi-Ullman algorithm" 
  href="http://en.wikipedia.org/wiki/Sethi-Ullman_algorithm">Sethi-Ullman 
  algorithm</A>). </LI></OL>
<P>Compiler analysis is the prerequisite for any compiler optimization, and they 
tightly work together. For example, <A title="Dependence analysis" 
href="http://en.wikipedia.org/wiki/Dependence_analysis">dependence analysis</A> 
is crucial for <A class=mw-redirect title="Loop transformation" 
href="http://en.wikipedia.org/wiki/Loop_transformation">loop 
transformation</A>.</P>
<P>In addition, the scope of compiler analysis and optimizations vary greatly, 
from as small as a <A title="Basic block" 
href="http://en.wikipedia.org/wiki/Basic_block">basic block</A> to the 
procedure/function level, or even over the whole program (<A 
title="Interprocedural optimization" 
href="http://en.wikipedia.org/wiki/Interprocedural_optimization">interprocedural 
optimization</A>). Obviously, a compiler can potentially do a better job using a 
broader view. But that broad view is not free: large scope analysis and 
optimizations are very costly in terms of compilation time and memory space; 
this is especially true for interprocedural analysis and optimizations.</P>
<P>Interprocedural analysis and optimizations are common in modern commercial 
compilers from <A title=Hewlett-Packard 
href="http://en.wikipedia.org/wiki/Hewlett-Packard">HP</A>, <A title=IBM 
href="http://en.wikipedia.org/wiki/IBM">IBM</A>, <A title="Silicon Graphics" 
href="http://en.wikipedia.org/wiki/Silicon_Graphics">SGI</A>, <A 
class=mw-redirect title=Intel 
href="http://en.wikipedia.org/wiki/Intel">Intel</A>, <A title=Microsoft 
href="http://en.wikipedia.org/wiki/Microsoft">Microsoft</A>, and <A 
title="Sun Microsystems" 
href="http://en.wikipedia.org/wiki/Sun_Microsystems">Sun Microsystems</A>. The 
open source <A title="GNU Compiler Collection" 
href="http://en.wikipedia.org/wiki/GNU_Compiler_Collection">GCC</A> was 
criticized for a long time for lacking powerful interprocedural optimizations, 
but it is changing in this respect. Another open source compiler with full 
analysis and optimization infrastructure is <A title=Open64 
href="http://en.wikipedia.org/wiki/Open64">Open64</A>, which is used by many 
organizations for research and commercial purposes.</P>
<P>Due to the extra time and space needed for compiler analysis and 
optimizations, some compilers skip them by default. Users have to use 
compilation options to explicitly tell the compiler which optimizations should 
be enabled.</P>
<P><A id=Related_techniques name=Related_techniques></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: Related techniques" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=10">edit</A>]</SPAN> 
<SPAN class=mw-headline>Related techniques</SPAN></H2>
<P><A title="Assembly language" 
href="http://en.wikipedia.org/wiki/Assembly_language">Assembly language</A> is 
not a high-level language and a program that compiles it is more commonly known 
as an <I>assembler</I>, with the inverse program known as a <I><A 
title=Disassembler 
href="http://en.wikipedia.org/wiki/Disassembler">disassembler</A></I>.</P>
<P>A program that translates from a low level language to a higher level one is 
a <I><A title=Decompiler 
href="http://en.wikipedia.org/wiki/Decompiler">decompiler</A></I>.</P>
<P>A program that translates between high-level languages is usually called a 
<I>language translator</I>, <I>source to source translator</I>, <I>language 
converter</I>, or <I>language <A title=Rewriting 
href="http://en.wikipedia.org/wiki/Rewriting">rewriter</A></I>. The last term is 
usually applied to translations that do not involve a change of language.</P>
<P><A id=See_also name=See_also></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: See also" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=11">edit</A>]</SPAN> 
<SPAN class=mw-headline>See also</SPAN></H2>
<UL>
  <LI><A title="List of compilers" 
  href="http://en.wikipedia.org/wiki/List_of_compilers">List of compilers</A> 
  <LI><A title="Abstract interpretation" 
  href="http://en.wikipedia.org/wiki/Abstract_interpretation">Abstract 
  interpretation</A> 
  <LI><A title="Attribute grammar" 
  href="http://en.wikipedia.org/wiki/Attribute_grammar">Attribute grammar</A> 
  <LI><A title="Bottom-up parsing" 
  href="http://en.wikipedia.org/wiki/Bottom-up_parsing">Bottom-up parsing</A> 
  <LI><A class=mw-redirect title="Error avalanche" 
  href="http://en.wikipedia.org/wiki/Error_avalanche">Error avalanche</A> 
  <LI><A title="Just-in-time compilation" 
  href="http://en.wikipedia.org/wiki/Just-in-time_compilation">Just-in-time 
  compilation</A> 
  <LI><A title=Linker href="http://en.wikipedia.org/wiki/Linker">Linker</A> 
  <LI><A title="List of important publications in computer science" 
  href="http://en.wikipedia.org/wiki/List_of_important_publications_in_computer_science#Compilers">List 
  of important publications in computer science#Compilers</A> 
  <LI><A title=Metacompilation 
  href="http://en.wikipedia.org/wiki/Metacompilation">Metacompilation</A> 
  <LI><A title="Semantics encoding" 
  href="http://en.wikipedia.org/wiki/Semantics_encoding">Semantics encoding</A> 
  </LI></UL>
<P><A id=Notes name=Notes></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: Notes" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=12">edit</A>]</SPAN> 
<SPAN class=mw-headline>Notes</SPAN></H2>
<DIV class="references-small references-column-count references-column-count-2" 
style="-moz-column-count: 2; column-count: 2">
<OL class=references>
  <LI id=cite_note-0><B><A title="" 
  href="http://en.wikipedia.org/wiki/Compilers#cite_ref-0">^</A></B> <A 
  class="external text" 
  title=http://www.interesting-people.org/archives/interesting-people/199706/msg00011.html 
  href="http://www.interesting-people.org/archives/interesting-people/199706/msg00011.html" 
  rel=nofollow>IP: "The World's First COBOL Compilers" -- 12 June 1997</A> 
  <LI id=cite_note-1><B><A title="" 
  href="http://en.wikipedia.org/wiki/Compilers#cite_ref-1">^</A></B> <A 
  class="external text" 
  title=ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-039.pdf 
  href="ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-039.pdf" 
  rel=nofollow>T. Hart and M. Levin "The New Compiler", AIM-39</A> CSAIL Digital 
  Archive - Artificial Intelligence Laboratory Series 
  <LI id=cite_note-2><B><A title="" 
  href="http://en.wikipedia.org/wiki/Compilers#cite_ref-2">^</A></B> <A 
  class="external text" title=http://www.246.dk/pl0.html 
  href="http://www.246.dk/pl0.html" rel=nofollow>"The PL/0 
  compiler/interpreter"</A> 
  <LI id=cite_note-3><B><A title="" 
  href="http://en.wikipedia.org/wiki/Compilers#cite_ref-3">^</A></B> <A 
  class="external text" title=http://www.acm.org/classics/dec95/ 
  href="http://www.acm.org/classics/dec95/" rel=nofollow>Book description at the 
  ACM Digital Library</A> </LI></OL></DIV>
<P><A id=References name=References></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: References" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=13">edit</A>]</SPAN> 
<SPAN class=mw-headline>References</SPAN></H2>
<DIV class=references-small 
style="MARGIN-LEFT: 1.5em; -moz-column-count: 2; -webkit-column-count: 2; column-count: 2">
<UL>
  <LI><A class="external text" 
  title=http://www.informatik.uni-trier.de/~ley/db/books/compiler/index.html 
  href="http://www.informatik.uni-trier.de/~ley/db/books/compiler/index.html" 
  rel=nofollow>Compiler textbook references</A> A collection of references to 
  mainstream Compiler Construction Textbooks 
  <LI><I><A title="Compilers: Principles, Techniques, and Tools" 
  href="http://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools">Compilers: 
  Principles, Techniques and Tools</A></I> by <A class=mw-redirect 
  title="Alfred V. Aho" href="http://en.wikipedia.org/wiki/Alfred_V._Aho">Alfred 
  V. Aho</A>, <A title="Ravi Sethi" 
  href="http://en.wikipedia.org/wiki/Ravi_Sethi">Ravi Sethi</A>, and <A 
  class=mw-redirect title="Jeffrey D. Ullman" 
  href="http://en.wikipedia.org/wiki/Jeffrey_D._Ullman">Jeffrey D. Ullman</A> 
  (<A class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/0201100886">ISBN 
  0-201-10088-6</A>) <A class="external text" 
  title=http://www.aw.com/catalog/academic/product/0,4096,0201100886,00.html 
  href="http://www.aw.com/catalog/academic/product/0,4096,0201100886,00.html" 
  rel=nofollow>link to publisher</A>. Also known as “The Dragon Book.” 
  <LI><I>Advanced Compiler Design and Implementation</I> by <A 
  title="Steven Muchnick" 
  href="http://en.wikipedia.org/wiki/Steven_Muchnick">Steven Muchnick</A> (<A 
  class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/1558603204">ISBN 
  1-55860-320-4</A>). 
  <LI><I>Engineering a Compiler</I> by Keith D. Cooper and Linda Torczon. Morgan 
  Kaufmann 2004, <A class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/1558606998">ISBN 
  1-55860-699-8</A>. 
  <LI><I>Understanding and Writing Compilers: A Do It Yourself Guide</I> (<A 
  class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/0333217322">ISBN 
  0-333-21732-2</A>) by <A title="Richard Bornat" 
  href="http://en.wikipedia.org/wiki/Richard_Bornat">Richard Bornat</A>. <A 
  class="external text" 
  title=http://www.cs.mdx.ac.uk/staffpages/r_bornat/books/compiling.pdf 
  href="http://www.cs.mdx.ac.uk/staffpages/r_bornat/books/compiling.pdf" 
  rel=nofollow>An on-line version of the book.</A> 
  <LI><I>An Overview of the Production Quality Compiler-Compiler Project</I> by 
  Leverett, Cattel, Hobbs, Newcomer, Reiner, Schatz and Wulf. Computer 
  13(8):38-49 (August 1980) 
  <LI><I>Compiler Construction</I> by <A title="Niklaus Wirth" 
  href="http://en.wikipedia.org/wiki/Niklaus_Wirth">Niklaus Wirth</A> (<A 
  class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/0201403536">ISBN 
  0-201-40353-6</A>) Addison-Wesley 1996, 176 pages, <A 
  class="external autonumber" title=http://www.oberon2005.ru/book/ccnw2005e.pdf 
  href="http://www.oberon2005.ru/book/ccnw2005e.pdf" rel=nofollow>[1]</A>. 
  <LI>"Programming Language Pragmatics" by Michael Scott (<A class=internal 
  href="http://en.wikipedia.org/wiki/Special:BookSources/0126339511">ISBN 
  0-12-633951-1</A>) Morgan Kaufmann 2005, 2nd edition, 912 pages. <A 
  class="external text" title=http://www.cs.rochester.edu/~scott/pragmatics/ 
  href="http://www.cs.rochester.edu/~scott/pragmatics/" rel=nofollow>The 
  author's site</A>. 
  <LI><A class="external text" 
  title=http://www.research.ibm.com/journal/rd/255/ibmrd2505Q.pdf 
  href="http://www.research.ibm.com/journal/rd/255/ibmrd2505Q.pdf" 
  rel=nofollow>"A History of Language Processor Technology in IBM"</A>, by F.E. 
  Allen, IBM Journal of Research and Development, v.25, no.5, September 1981. 
  </LI></UL></DIV>
<P><A id=External_links name=External_links></A></P>
<H2><SPAN class=editsection>[<A title="Edit section: External links" 
href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit&amp;section=14">edit</A>]</SPAN> 
<SPAN class=mw-headline>External links</SPAN></H2>
<DIV class="infobox sisterproject" style="FLOAT: right">
<DIV style="FLOAT: left">
<DIV class=floatnone><SPAN><A class=image title=Wiktionary-logo-en.svg 
href="http://en.wikipedia.org/wiki/Image:Wiktionary-logo-en.svg"><IMG height=53 
alt="" src="Compiler_files/49px-Wiktionary-logo-en.svg.png" width=49 
border=0></A></SPAN></DIV></DIV>
<DIV style="MARGIN-LEFT: 60px">Look up <I><B><A class=extiw 
title=wiktionary:compiler 
href="http://en.wiktionary.org/wiki/compiler">compiler</A></B></I> in<BR><A 
title=Wiktionary href="http://en.wikipedia.org/wiki/Wiktionary">Wiktionary</A>, 
the free dictionary.</DIV></DIV>
<DIV class="infobox sisterproject">
<DIV style="FLOAT: left">
<DIV class=floatnone><SPAN><A class=image title=Wikibooks 
href="http://en.wikipedia.org/wiki/Image:Wikibooks-logo-en.svg"><IMG height=57 
alt=Wikibooks src="Compiler_files/50px-Wikibooks-logo-en.svg.png" width=50 
border=0></A></SPAN></DIV></DIV>
<DIV style="MARGIN-LEFT: 60px"><A title=Wikibooks 
href="http://en.wikipedia.org/wiki/Wikibooks">Wikibooks</A> has a book on the 
topic of 
<DIV style="MARGIN-LEFT: 10px"><I><B><A class=extiw 
title="wikibooks:Compiler construction" 
href="http://en.wikibooks.org/wiki/Compiler_construction">Compiler 
construction</A></B></I></DIV></DIV></DIV>
<UL>
  <LI><A class="external text" title=http://compilers.iecc.com/ 
  href="http://compilers.iecc.com/" rel=nofollow>The comp.compilers newsgroup 
  and RSS feed</A> 
  <LI><A class="external text" title=http://www.jiscmail.ac.uk/lists/hwcomp.html 
  href="http://www.jiscmail.ac.uk/lists/hwcomp.html" rel=nofollow>Hardware 
  compilation mailing list</A> </LI></UL>
<DIV class="boilerplate catalso"></DIV><!-- 
NewPP limit report
Preprocessor node count: 247/1000000
Post-expand include size: 2120/2048000 bytes
Template argument size: 441/2048000 bytes
Expensive parser function count: 0/500
--><!-- Saved in parser cache with key enwiki:pcache:idhash:5739-0!1!0!default!!en!2 and timestamp 20081023144155 -->
<DIV class=printfooter>Retrieved from "<A 
href="http://en.wikipedia.org/wiki/Compiler">http://en.wikipedia.org/wiki/Compiler</A>"</DIV>
<DIV class=catlinks id=catlinks>
<DIV id=mw-normal-catlinks><A title=Special:Categories 
href="http://en.wikipedia.org/wiki/Special:Categories">Categories</A>: <SPAN 
dir=ltr><A title=Category:Compilers 
href="http://en.wikipedia.org/wiki/Category:Compilers">Compilers</A></SPAN> | 
<SPAN dir=ltr><A title="Category:Compiler theory" 
href="http://en.wikipedia.org/wiki/Category:Compiler_theory">Compiler 
theory</A></SPAN> | <SPAN dir=ltr><A title="Category:Computer libraries" 
href="http://en.wikipedia.org/wiki/Category:Computer_libraries">Computer 
libraries</A></SPAN> | <SPAN dir=ltr><A 
title="Category:Programming language implementation" 
href="http://en.wikipedia.org/wiki/Category:Programming_language_implementation">Programming 
language implementation</A></SPAN></DIV></DIV><!-- end content -->
<DIV class=visualClear></DIV></DIV></DIV></DIV>
<DIV id=column-one>
<DIV class=portlet id=p-cactions>
<H5>Views</H5>
<DIV class=pBody>
<UL>
  <LI class=selected id=ca-nstab-main><A title="View the content page [c]" 
  accessKey=c href="http://en.wikipedia.org/wiki/Compiler">Article</A> 
  <LI id=ca-talk><A title="Discussion about the content page [t]" accessKey=t 
  href="http://en.wikipedia.org/wiki/Talk:Compiler">Discussion</A> 
  <LI id=ca-edit><A 
  title="You can edit this page. &#10;Please use the preview button before saving. [e]" 
  accessKey=e 
  href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=edit">Edit 
  this page</A> 
  <LI id=ca-history><A title="Past versions of this page [h]" accessKey=h 
  href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;action=history">History</A> 
  </LI></UL></DIV></DIV>
<DIV class=portlet id=p-personal>
<H5>Personal tools</H5>
<DIV class=pBody>
<UL>
  <LI id=pt-login><A 
  title="You are encouraged to log in; however, it is not mandatory. [o]" 
  accessKey=o 
  href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Compiler">Log 
  in / create account</A> </LI></UL></DIV></DIV>
<DIV class=portlet id=p-logo><A title="Visit the main page [z]" 
style="BACKGROUND-IMAGE: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png)" 
accessKey=z href="http://en.wikipedia.org/wiki/Main_Page"></A></DIV>
<SCRIPT type=text/javascript> if (window.isMSIE55) fixalpha(); </SCRIPT>

<DIV class="generated-sidebar portlet" id=p-navigation>
<H5>Navigation</H5>
<DIV class=pBody>
<UL>
  <LI id=n-mainpage-description><A title="Visit the main page [z]" accessKey=z 
  href="http://en.wikipedia.org/wiki/Main_Page">Main page</A> 
  <LI id=n-contents><A title="Guides to browsing Wikipedia" 
  href="http://en.wikipedia.org/wiki/Portal:Contents">Contents</A> 
  <LI id=n-featuredcontent><A title="Featured content — the best of Wikipedia" 
  href="http://en.wikipedia.org/wiki/Portal:Featured_content">Featured 
  content</A> 
  <LI id=n-currentevents><A 
  title="Find background information on current events" 
  href="http://en.wikipedia.org/wiki/Portal:Current_events">Current events</A> 
  <LI id=n-randompage><A title="Load a random article [x]" accessKey=x 
  href="http://en.wikipedia.org/wiki/Special:Random">Random article</A> 
</LI></UL></DIV></DIV>
<DIV class=portlet id=p-search>
<H5><LABEL for=searchInput>Search</LABEL></H5>
<DIV class=pBody id=searchBody>
<FORM id=searchform action=/wiki/Special:Search>
<DIV><INPUT id=searchInput title="Search Wikipedia [f]" accessKey=f name=search> 
<INPUT class=searchButton id=searchGoButton title="Go to a page with this exact name if one exists" type=submit value=Go name=go>&nbsp; 
<INPUT class=searchButton id=mw-searchButton title="Search Wikipedia for this text" type=submit value=Search name=fulltext> 
</DIV></FORM></DIV></DIV>
<DIV class="generated-sidebar portlet" id=p-interaction>
<H5>Interaction</H5>
<DIV class=pBody>
<UL>
  <LI id=n-aboutsite><A title="Find out about Wikipedia" 
  href="http://en.wikipedia.org/wiki/Wikipedia:About">About Wikipedia</A> 
  <LI id=n-portal><A 
  title="About the project, what you can do, where to find things" 
  href="http://en.wikipedia.org/wiki/Wikipedia:Community_portal">Community 
  portal</A> 
  <LI id=n-recentchanges><A title="The list of recent changes in the wiki [r]" 
  accessKey=r href="http://en.wikipedia.org/wiki/Special:RecentChanges">Recent 
  changes</A> 
  <LI id=n-contact><A title="How to contact Wikipedia" 
  href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</A> 

  <LI id=n-sitesupport><A title="Support us" 
  href="http://wikimediafoundation.org/wiki/Donate">Donate to Wikipedia</A> 
  <LI id=n-help><A title="Guidance on how to use and edit Wikipedia" 
  href="http://en.wikipedia.org/wiki/Help:Contents">Help</A> 
</LI></UL></DIV></DIV>
<DIV class=portlet id=p-tb>
<H5>Toolbox</H5>
<DIV class=pBody>
<UL>
  <LI id=t-whatlinkshere><A 
  title="List of all English Wikipedia pages containing links to this page [j]" 
  accessKey=j 
  href="http://en.wikipedia.org/wiki/Special:WhatLinksHere/Compiler">What links 
  here</A> 
  <LI id=t-recentchangeslinked><A 
  title="Recent changes in pages linked from this page [k]" accessKey=k 
  href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/Compiler">Related 
  changes</A> 
  <LI id=t-upload><A title="Upload files [u]" accessKey=u 
  href="http://en.wikipedia.org/wiki/Wikipedia:Upload">Upload file</A> 
  <LI id=t-specialpages><A title="List of all special pages [q]" accessKey=q 
  href="http://en.wikipedia.org/wiki/Special:SpecialPages">Special pages</A> 
  <LI id=t-print><A title="Printable version of this page [p]" accessKey=p 
  href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;printable=yes">Printable 
  version</A> 
  <LI id=t-permalink><A title="Permanent link to this version of the page" 
  href="http://en.wikipedia.org/w/index.php?title=Compiler&amp;oldid=247177604">Permanent 
  link</A>
  <LI id=t-cite><A 
  href="http://en.wikipedia.org/w/index.php?title=Special:Cite&amp;page=Compiler&amp;id=247177604">Cite 
  this page</A> </LI></UL></DIV></DIV>
<DIV class=portlet id=p-lang>
<H5>Languages</H5>
<DIV class=pBody>
<UL>
  <LI class=interwiki-af><A 
  href="http://af.wikipedia.org/wiki/Vertalerkonstruksie">Afrikaans</A> 
  <LI class=interwiki-ar><A 
  href="http://ar.wikipedia.org/wiki/%D9%85%D8%B5%D8%B1%D9%81_(%D8%A8%D8%B1%D9%85%D8%AC%D8%A9)">العربية</A> 

  <LI class=interwiki-an><A 
  href="http://an.wikipedia.org/wiki/Compilador">Aragonés</A> 
  <LI class=interwiki-ast><A 
  href="http://ast.wikipedia.org/wiki/Compilador">Asturianu</A> 
  <LI class=interwiki-bs><A 
  href="http://bs.wikipedia.org/wiki/Kompajler">Bosanski</A> 
  <LI class=interwiki-bg><A 
  href="http://bg.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B0%D1%82%D0%BE%D1%80">Български</A> 

  <LI class=interwiki-ca><A 
  href="http://ca.wikipedia.org/wiki/Compilador">Català</A> 
  <LI class=interwiki-cs><A 
  href="http://cs.wikipedia.org/wiki/P%C5%99eklada%C4%8D">Česky</A> 
  <LI class=interwiki-da><A 
  href="http://da.wikipedia.org/wiki/Compiler">Dansk</A> 
  <LI class=interwiki-de><A 
  href="http://de.wikipedia.org/wiki/Compiler">Deutsch</A> 
  <LI class=interwiki-et><A 
  href="http://et.wikipedia.org/wiki/Kompilaator">Eesti</A> 
  <LI class=interwiki-el><A 
  href="http://el.wikipedia.org/wiki/%CE%9C%CE%B5%CF%84%CE%B1%CE%B3%CE%BB%CF%89%CF%84%CF%84%CE%B9%CF%83%CF%84%CE%AE%CF%82">Ελληνικά</A> 

  <LI class=interwiki-es><A 
  href="http://es.wikipedia.org/wiki/Compilador">Español</A> 
  <LI class=interwiki-eo><A 
  href="http://eo.wikipedia.org/wiki/Tradukilo">Esperanto</A> 
  <LI class=interwiki-fa><A 
  href="http://fa.wikipedia.org/wiki/%D9%87%D9%85%DA%AF%D8%B1%D8%AF%D8%A7%D9%86">فارسی</A> 

  <LI class=interwiki-fr><A 
  href="http://fr.wikipedia.org/wiki/Compilateur">Français</A> 
  <LI class=interwiki-gl><A 
  href="http://gl.wikipedia.org/wiki/Compilador">Galego</A> 
  <LI class=interwiki-ko><A 
  href="http://ko.wikipedia.org/wiki/%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC">한국어</A> 

  <LI class=interwiki-hr><A 
  href="http://hr.wikipedia.org/wiki/Jezi%C4%8Dni_procesor">Hrvatski</A> 
  <LI class=interwiki-id><A 
  href="http://id.wikipedia.org/wiki/Kompilator">Bahasa Indonesia</A> 
  <LI class=interwiki-it><A 
  href="http://it.wikipedia.org/wiki/Compilatore">Italiano</A> 
  <LI class=interwiki-he><A 
  href="http://he.wikipedia.org/wiki/%D7%9E%D7%94%D7%93%D7%A8">עברית</A> 
  <LI class=interwiki-ka><A 
  href="http://ka.wikipedia.org/wiki/%E1%83%99%E1%83%9D%E1%83%9B%E1%83%9E%E1%83%98%E1%83%9A%E1%83%90%E1%83%A2%E1%83%9D%E1%83%A0%E1%83%98">ქართული</A> 

  <LI class=interwiki-lt><A 
  href="http://lt.wikipedia.org/wiki/Kompiliatorius">Lietuvių</A> 
  <LI class=interwiki-hu><A 
  href="http://hu.wikipedia.org/wiki/Ford%C3%ADt%C3%B3program">Magyar</A> 
  <LI class=interwiki-mk><A 
  href="http://mk.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B0%D1%98%D0%BB%D0%B5%D1%80">Македонски</A> 

  <LI class=interwiki-ml><A 
  href="http://ml.wikipedia.org/wiki/%E0%B4%95%E0%B4%82%E0%B4%AA%E0%B5%88%E0%B4%B2%E0%B4%B0%E0%B5%8D%E2%80%8D">മലയാളം</A> 

  <LI class=interwiki-nl><A 
  href="http://nl.wikipedia.org/wiki/Compiler">Nederlands</A> 
  <LI class=interwiki-ja><A 
  href="http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9">日本語</A> 

  <LI class=interwiki-no><A 
  href="http://no.wikipedia.org/wiki/Kompilator">‪Norsk (bokmål)‬</A> 
  <LI class=interwiki-pl><A 
  href="http://pl.wikipedia.org/wiki/Kompilator">Polski</A> 
  <LI class=interwiki-pt><A 
  href="http://pt.wikipedia.org/wiki/Compilador">Português</A> 
  <LI class=interwiki-ru><A 
  href="http://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%82%D0%BE%D1%80">Русский</A> 

  <LI class=interwiki-simple><A 
  href="http://simple.wikipedia.org/wiki/Compiler">Simple English</A> 
  <LI class=interwiki-sr><A 
  href="http://sr.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B0%D1%82%D0%BE%D1%80">Српски 
  / Srpski</A> 
  <LI class=interwiki-fi><A 
  href="http://fi.wikipedia.org/wiki/Ohjelmointikielen_k%C3%A4%C3%A4nt%C3%A4j%C3%A4">Suomi</A> 

  <LI class=interwiki-sv><A 
  href="http://sv.wikipedia.org/wiki/Kompilator">Svenska</A> 
  <LI class=interwiki-ta><A 
  href="http://ta.wikipedia.org/wiki/%E0%AE%A8%E0%AE%BF%E0%AE%B0%E0%AE%B2%E0%AF%8D%E0%AE%AE%E0%AF%8A%E0%AE%B4%E0%AE%BF%E0%AE%AE%E0%AE%BE%E0%AE%B1%E0%AF%8D%E0%AE%B1%E0%AE%BF">தமிழ்</A> 

  <LI class=interwiki-th><A 
  href="http://th.wikipedia.org/wiki/%E0%B9%82%E0%B8%9B%E0%B8%A3%E0%B9%81%E0%B8%81%E0%B8%A3%E0%B8%A1%E0%B9%81%E0%B8%9B%E0%B8%A5%E0%B9%82%E0%B8%9B%E0%B8%A3%E0%B9%81%E0%B8%81%E0%B8%A3%E0%B8%A1">ไทย</A> 

  <LI class=interwiki-vi><A 
  href="http://vi.wikipedia.org/wiki/Tr%C3%ACnh_bi%C3%AAn_d%E1%BB%8Bch">Tiếng 
  Việt</A> 
  <LI class=interwiki-tr><A 
  href="http://tr.wikipedia.org/wiki/Derleyici">Türkçe</A> 
  <LI class=interwiki-yi><A 
  href="http://yi.wikipedia.org/wiki/%D7%A7%D7%90%D7%9E%D7%A4%D7%99%D7%99%D7%9C%D7%A2%D7%A8">ייִדיש</A> 

  <LI class=interwiki-zh><A 
  href="http://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8">中文</A> 
</LI></UL></DIV></DIV></DIV><!-- end of the left (by default at least) column -->
<DIV class=visualClear></DIV>
<DIV id=footer>
<DIV id=f-poweredbyico><A href="http://www.mediawiki.org/"><IMG 
alt="Powered by MediaWiki" 
src="Compiler_files/poweredby_mediawiki_88x31.png"></A></DIV>
<DIV id=f-copyrightico><A href="http://wikimediafoundation.org/"><IMG 
alt="Wikimedia Foundation" src="Compiler_files/wikimedia-button.png" 
border=0></A></DIV>
<UL id=f-list>
  <LI id=lastmod>This page was last modified on 23 October 2008, at 14:41. 
  <LI id=copyright>All text is available under the terms of the <A 
  class=internal title="Wikipedia:Text of the GNU Free Documentation License" 
  href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License">GNU 
  Free Documentation License</A>. (See <B><A class=internal 
  title=Wikipedia:Copyrights 
  href="http://en.wikipedia.org/wiki/Wikipedia:Copyrights">Copyrights</A></B> 
  for details.) <BR>Wikipedia® is a registered trademark of the <A 
  href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc</A>., a 
  U.S. registered <A class=internal title=501(c)(3) 
  href="http://en.wikipedia.org/wiki/501%28c%29#501.28c.29.283.29">501(c)(3)</A> 
  <A 
  href="http://wikimediafoundation.org/wiki/Deductibility_of_donations">tax-deductible</A> 
  <A class=internal title="Non-profit organization" 
  href="http://en.wikipedia.org/wiki/Non-profit_organization">nonprofit</A> <A 
  title="Charitable organization" 
  href="http://en.wikipedia.org/wiki/Charitable_organization">charity</A>.<BR>
  <LI id=privacy><A title="wikimedia:Privacy policy" 
  href="http://wikimediafoundation.org/wiki/Privacy_policy">Privacy policy</A> 
  <LI id=about><A title=Wikipedia:About 
  href="http://en.wikipedia.org/wiki/Wikipedia:About">About Wikipedia</A> 
  <LI id=disclaimer><A title="Wikipedia:General disclaimer" 
  href="http://en.wikipedia.org/wiki/Wikipedia:General_disclaimer">Disclaimers</A> 
  </LI></UL></DIV></DIV>
<SCRIPT type=text/javascript>if (window.runOnloadHook) runOnloadHook();</SCRIPT>
<!-- Served by srv180 in 0.145 secs. --></BODY></HTML>
